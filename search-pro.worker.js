const nt="ENTRIES",T="KEYS",V="VALUES",F="";class D{constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case V:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const a=o[h-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let l=0;l<c.length;++l,++a){const p=c[l],f=i*a,g=f-i;let d=o[f];const m=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<d&&(d=L)}if(d>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{constructor(t=new Map,s=""){this._size=void 0,this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=M(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=O(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=O(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,V)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},O=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return O(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=M(e);n.set(o+t,s),n.delete(o)},M=e=>e[e.length-1],it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",P="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},q=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,lt=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),q(n.terms,u)}}return e},[P]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);q(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},dt=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},ft={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},H={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:ft},mt={combineWith:P,prefix:(e,t,s)=>t===s.length-1},pt={batchSize:1e3,batchWait:10},J={minDirtFactor:.1,minDirtCount:20},Ft={...pt,...J};class _t{constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?Ft:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...H,...t.searchOptions||{}},autoSuggestOptions:{...mt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=J,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const yt=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},U=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},At=(e,t,s,n)=>{if(!e._index.has(n)){U(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?U(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(ht[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const a=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const d of p.keys()){if(!e._documentIds.has(d)){At(e,l,d,s),f-=1;continue}const m=i?i(e._documentIds.get(d),s,e._storedFields.get(d)):1;if(!m)continue;const y=p.get(d),_=e._fieldLength.get(d)[l],b=at(y,f,e._documentCount,_,g,r),z=n*a*m*b,A=h.get(d);if(A){A.score+=z,ct(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(d,{score:z,terms:[t],match:{[s]:[c]}})}}return h},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((d,m)=>({...d,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:a}={...H.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,m=d<1?Math.min(r,Math.round(t.term.length*d)):d;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[d,m]of f){const y=d.length-t.term.length;if(!y)continue;g==null||g.delete(d);const _=a*d.length/(d.length+.3*y);B(e,t.term,d,_,m,o,u,h,p)}if(g)for(const d of g.keys()){const[m,y]=g.get(d);if(!y)continue;const _=c*d.length/(d.length+y);B(e,t.term,d,_,m,o,u,h,p)}return p},K=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},l=t.queries.map(p=>K(e,p,a));return Y(l,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(a=>h(a)).filter(a=>!!a).map(dt(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},X=(e,t,s={})=>{const n=K(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of X(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o},zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new _t(a);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const d of Object.keys(f)){let m=f[d];c===1&&(m=m.ds),g.set(parseInt(d,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:a?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return X(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[a,l]=u.split(/[#@]/),{contents:p}=n[a]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:a,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:a,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const d=i.map(m=>j(g,m)).filter(m=>m!==null);d.length&&p.push([{type:"text",key:a,...c&&{anchor:l},display:d},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=yt(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Et(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":119,\"nextId\":119,\"documentIds\":{\"0\":\"v-22a39d25\",\"1\":\"v-59a8eadd\",\"2\":\"v-59a8eadd#添加root密码\",\"3\":\"v-59a8eadd#更改服务器绑定地址\",\"4\":\"v-59a8eadd#添加远程访问用户\",\"5\":\"v-59a8eadd#为远程访问用户授权\",\"6\":\"v-59a8eadd#附-收回权限和删除用户\",\"7\":\"v-6c09952d\",\"8\":\"v-6c09952d#场景描述\",\"9\":\"v-6c09952d#使用事务\",\"10\":\"v-6c09952d#使用执行准备\",\"11\":\"v-6c09952d#使用内存模式\",\"12\":\"v-6c09952d#修改写同步模式\",\"13\":\"v-6c09952d#测试结果\",\"14\":\"v-7007554c\",\"15\":\"v-2cfcd410\",\"16\":\"v-c9593926\",\"17\":\"v-2ea32714\",\"18\":\"v-2ea32714#本地有新分支-远程没有\",\"19\":\"v-2ea32714#远程有新分支-本地没有\",\"20\":\"v-2ea32714#本地删除了分支-远程也想删除\",\"21\":\"v-2ea32714#远程删除了分支-本地也想删除\",\"22\":\"v-ee4c569c\",\"23\":\"v-ee4c569c#安装git\",\"24\":\"v-ee4c569c#在windows上安装git\",\"25\":\"v-ee4c569c#在mac上安装git\",\"26\":\"v-ee4c569c#在linux上安装git\",\"27\":\"v-ee4c569c#配置git\",\"28\":\"v-ee4c569c#创建仓库\",\"29\":\"v-ee4c569c#初始化仓库\",\"30\":\"v-ee4c569c#克隆仓库\",\"31\":\"v-ee4c569c#操作文件\",\"32\":\"v-ee4c569c#分支管理\",\"33\":\"v-ee4c569c#远程仓库操作\",\"34\":\"v-ee4c569c#撤销操作\",\"35\":\"v-2ae4875a\",\"36\":\"v-2ae4875a#设置代理\",\"37\":\"v-2ae4875a#取消代理\",\"38\":\"v-dd038726\",\"39\":\"v-dd038726#cmakelists-txt-文件的编写\",\"40\":\"v-dd038726#cmake-最低版本要求\",\"41\":\"v-dd038726#项目名称和源代码\",\"42\":\"v-dd038726#依赖项\",\"43\":\"v-dd038726#构建选项\",\"44\":\"v-dd038726#项目配置和构建\",\"45\":\"v-dd038726#创建构建目录\",\"46\":\"v-dd038726#配置项目\",\"47\":\"v-dd038726#构建项目\",\"48\":\"v-dd038726#运行项目\",\"49\":\"v-dd038726#交叉编译\",\"50\":\"v-dd038726#设置交叉编译工具链\",\"51\":\"v-dd038726#设置交叉编译器的根路径\",\"52\":\"v-dd038726#传参数指定交叉编译工具链的-cmake文件\",\"53\":\"v-dd038726#经验总结\",\"54\":\"v-dd038726#使用变量\",\"55\":\"v-dd038726#使用-find-package\",\"56\":\"v-dd038726#使用-add-subdirectory\",\"57\":\"v-dd038726#使用-configure-file\",\"58\":\"v-dd038726#自定义构建规则\",\"59\":\"v-dd038726#获取文件夹名称\",\"60\":\"v-3ed7fd8a\",\"61\":\"v-3ed7fd8a#_1-文本段-text-segment、代码段、代码区\",\"62\":\"v-3ed7fd8a#_2-数据段-data-segment、全局-静态数据段、全局-静态存储区\",\"63\":\"v-3ed7fd8a#_2-1-已初始化数据段-initialized-data-segment\",\"64\":\"v-3ed7fd8a#_2-2-未初始化的数据段-uninitialized-data-segment、bss\",\"65\":\"v-3ed7fd8a#_3-堆-heap\",\"66\":\"v-3ed7fd8a#_4-栈-stack\",\"67\":\"v-3ed7fd8a#关于-c-程序的自由存储区-free-store\",\"68\":\"v-463dbcaa\",\"69\":\"v-463dbcaa#原则\",\"70\":\"v-463dbcaa#常用优化方法\",\"71\":\"v-1323e086\",\"72\":\"v-68781070\",\"73\":\"v-ff09e82a\",\"74\":\"v-ff09e82a#原理\",\"75\":\"v-ff09e82a#源码\",\"76\":\"v-80b2e9e4\",\"77\":\"v-705f3b7f\",\"78\":\"v-705f3b7f#导出函数\",\"79\":\"v-705f3b7f#使用-extern-c\",\"80\":\"v-705f3b7f#编译源文件\",\"81\":\"v-705f3b7f#动态加载和编译时链接\",\"82\":\"v-705f3b7f#链接动态库\",\"83\":\"v-705f3b7f#使用动态库\",\"84\":\"v-705f3b7f#动态库路径规范\",\"85\":\"v-705f3b7f#编译链接时指定动态库路径\",\"86\":\"v-705f3b7f#使用-rpath参数\",\"87\":\"v-705f3b7f#使用cmake构建动态库\",\"88\":\"v-705f3b7f#使用cmake链接动态库\",\"89\":\"v-705f3b7f#相关技巧\",\"90\":\"v-705f3b7f#查看版本号\",\"91\":\"v-705f3b7f#查看被依赖项\",\"92\":\"v-cbb8c978\",\"93\":\"v-cbb8c978#设计模式简介\",\"94\":\"v-cbb8c978#设计模式七大原则\",\"95\":\"v-cbb8c978#开闭原则-open-close-principle\",\"96\":\"v-cbb8c978#里氏代换原则-liskov-substitution-principle\",\"97\":\"v-cbb8c978#依赖倒转原则-dependence-inversion-principle\",\"98\":\"v-cbb8c978#接口隔离原则-interface-segregation-principle\",\"99\":\"v-cbb8c978#迪米特法则-又称最少知道原则-demeter-principle\",\"100\":\"v-cbb8c978#合成复用原则-composite-reuse-principle\",\"101\":\"v-cbb8c978#单一职责原则-single-responsibility-principle\",\"102\":\"v-cbb8c978#设计模式分类\",\"103\":\"v-cbb8c978#从目的对模式分类\",\"104\":\"v-cbb8c978#创建型模式\",\"105\":\"v-cbb8c978#结构型模式\",\"106\":\"v-cbb8c978#行为型模式\",\"107\":\"v-cbb8c978#从封装变化角度对模式分类\",\"108\":\"v-83855198\",\"109\":\"v-83855198#静态库与动态库的区别\",\"110\":\"v-83855198#静态库开发方法\",\"111\":\"v-83855198#使用cmake构建静态库\",\"112\":\"v-83855198#指定库的名称\",\"113\":\"v-83855198#生成静态库libxxx-a\",\"114\":\"v-83855198#手动指定库文件名\",\"115\":\"v-83855198#去掉库文件名前缀\",\"116\":\"v-83855198#把静态库放进动态库\",\"117\":\"v-5902b226\",\"118\":\"v-6d6b0ed6\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,1],\"1\":[4,16],\"2\":[1,35],\"3\":[1,35],\"4\":[1,38],\"5\":[1,23],\"6\":[2,19],\"7\":[1],\"8\":[1,51],\"9\":[1,62],\"10\":[1,76],\"11\":[1,83],\"12\":[1,34],\"13\":[1,20],\"14\":[8,102],\"15\":[2,52],\"16\":[1,27],\"17\":[1],\"18\":[2,4],\"19\":[2,13],\"20\":[2,10],\"21\":[2,5],\"22\":[1,4],\"23\":[1],\"24\":[1,3],\"25\":[1,4],\"26\":[1,7],\"27\":[1,15],\"28\":[1],\"29\":[1,7],\"30\":[1,6],\"31\":[1,18],\"32\":[1,16],\"33\":[1,17],\"34\":[1,12],\"35\":[1,18],\"36\":[1,22],\"37\":[1,10],\"38\":[1,8],\"39\":[3,11],\"40\":[2,17],\"41\":[1,20],\"42\":[1,23],\"43\":[1,23],\"44\":[1,7],\"45\":[1,9],\"46\":[1,26],\"47\":[1,19],\"48\":[1,12],\"49\":[1,5],\"50\":[1,35],\"51\":[1,21],\"52\":[2,17],\"53\":[1],\"54\":[1,48],\"55\":[3,22],\"56\":[3,19],\"57\":[3,36],\"58\":[1,21],\"59\":[1,11],\"60\":[1,5],\"61\":[7,13],\"62\":[8,2],\"63\":[7,25],\"64\":[7,23],\"65\":[4,15],\"66\":[4,21],\"67\":[6,13],\"68\":[2],\"69\":[1,33],\"70\":[1,35],\"71\":[1,136],\"72\":[2,100],\"73\":[1],\"74\":[1,41],\"75\":[1,72],\"76\":[1,31],\"77\":[1,13],\"78\":[1,20],\"79\":[4,51],\"80\":[1,15],\"81\":[1,20],\"82\":[1,14],\"83\":[1,55],\"84\":[1,25],\"85\":[1,40],\"86\":[2,32],\"87\":[1,31],\"88\":[1,26],\"89\":[1],\"90\":[1,16],\"91\":[1,20],\"92\":[1],\"93\":[1,39],\"94\":[1],\"95\":[5,13],\"96\":[5,15],\"97\":[5,5],\"98\":[5,11],\"99\":[5,4],\"100\":[5,5],\"101\":[5,6],\"102\":[1],\"103\":[1],\"104\":[1,17],\"105\":[1,23],\"106\":[1,35],\"107\":[1,36],\"108\":[1],\"109\":[1,26],\"110\":[1,19],\"111\":[1],\"112\":[1,8],\"113\":[2,8],\"114\":[1,12],\"115\":[1,7],\"116\":[1,12],\"117\":[1],\"118\":[1]},\"averageFieldLength\":[1.815126050420168,24.79791900988956],\"storedFields\":{\"0\":{\"h\":\"关于\",\"t\":[\"喵~\"]},\"1\":{\"h\":\"MySQL 8.0 以上开启远程访问\",\"t\":[\"MySQL 服务器默认绑定的地址是 127.0.0.1，只能通过 localhost 访问。如果想进行远程访问，需要进行一些简单的设置。\",\"网上搜到的很多资料都是基于老版本的，已经过时。 MySQL 官方文档写得过于详细（复杂）。所以特意写一篇文章记录一下配置过程。\"]},\"2\":{\"h\":\"添加root密码\",\"t\":[\"这一步不是必须的，可跳过。在 Windows 上安装 MySQL 过程中是可以在安装界面设置 root 密码的，但是在 Ubuntu 上用 apt 安装的 MySQL 是默认没有密码的，不安全，所以先添加密码。 首先通过以下命令登录MySQL：\",\"mysql -u root -p \",\"然后输入以下两条命令添加密码：\",\"use mysql; alter user 'root'@'localhost' identified with mysql_native_password by 'password'; \",\"注意：引号内的 password 需改为自己的密码。\"]},\"3\":{\"h\":\"更改服务器绑定地址\",\"t\":[\"更改配置文件 /etc/mysql/mysql.conf.d/mysqld.cnf\",\"PS： Windows 下的配置文件为 C:\\\\ProgramData\\\\MySQL\\\\MySQL Server 8.0\\\\my.ini\",\"将 [mysqld] 节点下的 bind-address 由原来的 127.0.0.1 改为 0.0.0.0\",\"然后重启 MySQL 服务，命令为：\",\"sudo systemctl restart mysql.service \",\"或者\",\"sudo service mysql restart \"]},\"4\":{\"h\":\"添加远程访问用户\",\"t\":[\"首先登录 MySQL，然后依次输入以下命令：\",\"use mysql; create user 'username'@'host' identified by 'password'; \",\"注意：引号内的值，需要根据实际需求进行设置。其中 username 为用户名； host 为登录域名，为 localhost 时表示本机，为 % 时表示任意 IP ，也可以像 192.168.1.% 这样，表示允许 192.168.1 这个段的所有 IP ； password 为密码。\",\"然后输入以下命令，确认是否添加成功：\",\"select User,Host from user; \"]},\"5\":{\"h\":\"为远程访问用户授权\",\"t\":[\"还是在上面的 MySQL 命令窗口中\",\"grant all privileges on *.* to 'username'@'host' with grant option; \",\"其中*.第一个表示所有数据库，第二个表示所有数据表，如果不想授权全部那就把对应的写成相应数据库或者数据表； username 为指定的用户； host 为该用户登录的域名\",\"授权操作完后刷新权限：\",\"flush privileges; \",\"这一步完成之后，就可以进行远程访问了。\"]},\"6\":{\"h\":\"附：收回权限和删除用户\",\"t\":[\"#收回权限（不包含赋权权限） REVOKE ALL PRIVILEGES ON *.* FROM username; REVOKE ALL PRIVILEGES ON username.* FROM username; #收回赋权权限 REVOKE GRANT OPTION ON *.* FROM username; #操作完后刷新权限 flush privileges; #删除用户 drop user 'username'@'host'; \"]},\"7\":{\"h\":\"SQLite3性能优化\"},\"8\":{\"h\":\"场景描述\",\"t\":[\"有10000条数据需要插入数据库，原来未优化的代码为直接循环执行INSERT语句。\",\"void test0() { sqlite3 *db = NULL; sqlite3_open(\\\"test0.db\\\", &db); auto begin = std::chrono::steady_clock::now(); sqlite3_exec(db, \\\"CREATE TABLE Test(id INTEGER,msg TEXT);\\\", 0, 0, 0); const int m = 10000; for (int i = 0; i < m; i++) { sqlite3_exec(db, \\\"INSERT INTO Test(id,msg) VALUES(123,'hello');\\\", 0, 0, 0); } auto end = std::chrono::steady_clock::now(); auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - begin).count(); printf(\\\"test0执行时间: %ld ms\\\\n\\\", elapsed); sqlite3_close(db); } \"]},\"9\":{\"h\":\"使用事务\",\"t\":[\"如果有许多数据需要插入数据库，逐条插入，导致频繁的提交以及磁盘 IO，使用事务机制，可以批量插入数据，可以极大的提升写入速度。\",\"void test1() { sqlite3* db = NULL; sqlite3_open(\\\"test1.db\\\", &db); auto begin = std::chrono::steady_clock::now(); sqlite3_exec(db, \\\"CREATE TABLE Test(id INTEGER,msg TEXT);\\\", 0, 0, 0); sqlite3_exec(db, \\\"BEGIN;\\\", 0, 0, 0); const int m = 10000; for (int i = 0; i < m; i++) { sqlite3_exec(db, \\\"INSERT INTO Test(id,msg) VALUES(123,'hello');\\\", 0, 0, 0); if (i % 1000 == 999) { sqlite3_exec(db, \\\"COMMIT;\\\", 0, 0, 0); sqlite3_exec(db, \\\"BEGIN;\\\", 0, 0, 0); } } sqlite3_exec(db, \\\"COMMIT;\\\", 0, 0, 0); auto end = std::chrono::steady_clock::now(); auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - begin).count(); printf(\\\"test1执行时间: %ld ms\\\\n\\\", elapsed); sqlite3_close(db); } \"]},\"10\":{\"h\":\"使用执行准备\",\"t\":[\"执行准备相当于将 SQL 语句提前编译，省去每次执行 SQL 语句时候的语法检查等操作，可以极大优化 SQL 语句的执行效率。\",\"void test2() { sqlite3* db = NULL; sqlite3_open(\\\"test2.db\\\", &db); sqlite3_exec(db, \\\"CREATE TABLE Test(id INTEGER,msg TEXT);\\\", 0, 0, 0); sqlite3_stmt *stmt = NULL; const char *sql = \\\"INSERT INTO Test(id,msg) VALUES (?,?);\\\"; auto begin = std::chrono::steady_clock::now(); sqlite3_prepare_v2(db, sql, strlen(sql), &stmt, 0); sqlite3_exec(db, \\\"BEGIN;\\\", 0, 0, 0); const int m = 10000; for (int i = 0; i < m; i++) { sqlite3_reset(stmt); sqlite3_bind_int(stmt, 1, 123); const char* str = \\\"hello\\\"; sqlite3_bind_text(stmt, 2, str, strlen(str), 0); sqlite3_step(stmt); if (i % 1000 == 999) { sqlite3_exec(db, \\\"COMMIT;\\\", 0, 0, 0); sqlite3_exec(db, \\\"BEGIN;\\\", 0, 0, 0); } } sqlite3_exec(db, \\\"COMMIT;\\\", 0, 0, 0); sqlite3_finalize(stmt); auto end = std::chrono::steady_clock::now(); auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - begin).count(); printf(\\\"test2执行时间: %ld ms\\\\n\\\", elapsed); sqlite3_close(db); } \"]},\"11\":{\"h\":\"使用内存模式\",\"t\":[\"内存模式是将数据库直接创建到内存中，使用方法为 sqlite3_open 打开 \\\":memory:\\\" ，内存模式相比普通模式，可以节省写文件时间。可以先将数据库创建到内存中，数据写入完整之后，再执行 VACUUM INTO语句将其写入到磁盘。使用内存模式写数据速度很快，但是一般用不到，毕竟我们一般用数据库就是为了数据的持久保存和读取。\",\"void test3() { sqlite3* db = NULL; sqlite3_open(\\\":memory:\\\", &db); sqlite3_exec(db, \\\"CREATE TABLE Test(id INTEGER,msg TEXT);\\\", 0, 0, 0); sqlite3_stmt *stmt = NULL; const char *sql = \\\"INSERT INTO Test(id,msg) VALUES (?,?);\\\"; auto begin = std::chrono::steady_clock::now(); sqlite3_prepare_v2(db, sql, strlen(sql), &stmt, 0); sqlite3_exec(db, \\\"BEGIN;\\\", 0, 0, 0); const int m = 10100; for (int i = 0; i < m; i++) { sqlite3_reset(stmt); sqlite3_bind_int(stmt, 1, 123); const char* str = \\\"hello\\\"; sqlite3_bind_text(stmt, 2, str, strlen(str), 0); sqlite3_step(stmt); if (i % 1000 == 999) { sqlite3_exec(db, \\\"COMMIT;\\\", 0, 0, 0); sqlite3_exec(db, \\\"BEGIN;\\\", 0, 0, 0); } } sqlite3_exec(db, \\\"COMMIT;\\\", 0, 0, 0); sqlite3_finalize(stmt); sqlite3_exec(db, \\\"VACUUM INTO 'test3.db';\\\", 0, 0, 0); auto end = std::chrono::steady_clock::now(); auto elapsed = std::chrono::duration_cast<std::chrono::milliseconds>(end - begin).count(); printf(\\\"test3执行时间: %ld ms\\\\n\\\", elapsed); sqlite3_close(db); } \"]},\"12\":{\"h\":\"修改写同步模式\",\"t\":[\"在 sqlite3 中 synchronous 有三种模式，分别是 FULL、NORMAL 和 OFF。默认synchronous值为FULL，在FULL模式下，保证数据不会损坏，安全性最高，但是写入速度也最慢。OFF 模式会比 FULL 模式快很多，但是数据损坏的可能性较大，不建议设为OFF。如果要加快写入速度，可以设置为NORMAL，速度比FULL快，并且几乎不会损坏数据（不是100%不会损坏）。 synchronous设置为NORMAL的方法为，在sqlite3_open语句后面加一行代码：\",\"sqlite3_exec(db, \\\"PRAGMA synchronous=NORMAL;\\\", 0, 0, 0); \"]},\"13\":{\"h\":\"测试结果\",\"t\":[\"我在自己电脑上测试了以上各种情况，打印程序执行所用的时间(ms)，数据如下表：\",\"synchronous\",\"FULL(默认)\",\"NORMAL\",\"不优化\",\"1447405\",\"977747\",\"使用事务\",\"1580\",\"1168\",\"使用事务+执行准备\",\"1436\",\"1004\",\"使用事务+执行准备+内存模式\",\"15\",\"9\"]},\"14\":{\"h\":\"在 Windows 上安装 Node.js 和 npm 的正确方法\",\"t\":[\"npm 是 Node.js下的 JavaScript 包管理器，目前开发前端基本上离不开 npm。\",\"其实安装过程是很简单的，但是我没想到 Node.js 官网上的安装包竟然也有坑。\",\"网上的文章一般是让大家从 Node.js 官网https://nodejs.org/zh-cn/download/\",\"下载安装包进行安装，但是我下载最新的 LTS 版本（长期维护版）https://nodejs.org/dist/v18.12.1/node-v18.12.1-x64.msi ，安装后发现npm版本有问题。\",\"官网上写的是Node.js 18.12.1 (包含 npm 8.19.2)，实际装完用 npm -v 查看发现是 6.4.1 版本，此 npm 版本太低，与Node.js 版本不匹配，无法使用，于是我就卸载了。\",\"然后我找到这篇文章https://learn.microsoft.com/zh-cn/windows/dev-environment/javascript/nodejs-on-windows ，使用 nvm 来安装 Node.js ，安装完后用 npm -v 查看，版本为用 8.19.2 ，这样就完全没有问题了。nvm 还可以实现多个 Node.js 版本共存，切换方便，推荐使用。\",\"具体安装步骤如下：\",\"在 https://github.com/coreybutler/nvm-windows/releases 下载 nvm-setup.exe，并安装\",\"安装完 nvm 之后，在命令行执行 nvm list available\",\"使用最新的 LTS 版本 18.12.1 安装（ LTS 比 CURRENT 版本更稳定），我用的安装命令是 nvm install 18.12.1\",\"安装完后使用 nvm ls 可以看到刚安装的 Node.js 版本，通过输入 nvm use 18.12.1 来选择要使用的版本（如果安装多个版本，也可使用 nvm use 版本号 进行切换）\",\"最后使用 node -v 查看 Node.js 版本，使用 npm -v 查看 npm 版本，确认安装成功\"]},\"15\":{\"h\":\"git add加不同参数的区别\",\"t\":[\"git add 可将该文件添加到暂存区。常用的加不同参数的命令有以下几个：\",\"# -A 相当于all，将当前整个工作区中所有的文件改动提交至暂存区 # 包括整个工作区中的新增、修改和被删除的文件，不受当前所在目录限制 git add -A # 将当前工作区中当前目录（包括子目录）下的所有的文件改动提交至暂存区 # 包括新增、修改和被删除的文件，不包括当前所在目录之外的文件 # 2.x 版本相比 1.x 版本，对 git add . 的功能做了改动 # 2.x 会提交被删除的文件，而 1.x 不包括被删除的文件 # 2.x 中如果想在使用 git add . 时不提交被删除的文件，可加上--ignore-removal git add . # 将当前整个工作区中被修改和被删除的文件提交至暂存区 # 包括整个工作区中修改和被删除的文件，不受当前所在目录限制 # 而新文件因为未被跟踪（untracked），所以不会被提交至暂存区 git add -u # 将当前工作区中当前目录（包括子目录）下的所有的文件改动提交至暂存区 # 包括新增、修改和被删除的文件，但不包括文件名以 . 符号开头的文件的改动 # 不包括当前所在目录之外的文件 git add * \",\"总结，对于 git 2.x 版本来说，各个命令的区别详见下表：\",\"命 令\",\"新 文 件\",\"被修改的文件\",\"被删除的文件\",\"当前目录外的文件\",\"git add -A\",\"✅\",\"✅\",\"✅\",\"✅\",\"git add .\",\"✅\",\"✅\",\"✅\",\"❌\",\"git add -u\",\"❌\",\"✅\",\"✅\",\"✅\",\"git add *\",\"❌\",\"✅\",\"✅\",\"❌\"]},\"16\":{\"h\":\"git不同分支代码的合并\",\"t\":[\"项目不同分支之间代码的合并是常用的操作。\",\"假设要把branchA的代码合并到branchB，步骤如下：\",\"（1）切换到branchB中，执行：\",\"git merge branchA --squash \",\"--squash 选项的含义是：不提交、不移动HEAD，因此需要一条额外的commit命令。效果相当于将原来分支上的多个commit合并成一个，放在当前分支上，原来的commit历史记录不合并过来（前提是分支的commit历史不重要）。\",\"（2）提交合并后的代码\",\"git commit -m \\\"合并分支代码\\\" \",\"（3）将代码推送到远程仓库\",\"git push \"]},\"17\":{\"h\":\"git同步远程仓库分支\"},\"18\":{\"h\":\"本地有新分支，远程没有\",\"t\":[\"在本地新分支中进行以下命令推送即可：\",\"git push \"]},\"19\":{\"h\":\"远程有新分支，本地没有\",\"t\":[\"# 将某个远程主机的更新，全部取回本地 git fetch # 查看所有分支 git branch -a # 创建并切换分支 git checkout -b 远程分支名 origin/远程分支名 \"]},\"20\":{\"h\":\"本地删除了分支，远程也想删除\",\"t\":[\"到gitlab/github/gitee进行删除，或者：\",\"git push origin -d 分支名 \"]},\"21\":{\"h\":\"远程删除了分支，本地也想删除\",\"t\":[\"git remote prune origin \"]},\"22\":{\"h\":\"git基本操作\",\"t\":[\"git是一个分布式版本控制系统，用于管理软件项目的源代码。以下内容为git的基本操作。\"]},\"23\":{\"h\":\"安装git\"},\"24\":{\"h\":\"在Windows上安装git\",\"t\":[\"访问git官网下载安装程序，然后按照提示进行安装。\"]},\"25\":{\"h\":\"在Mac上安装git\",\"t\":[\"使用Homebrew进行安装：\",\"brew install git\"]},\"26\":{\"h\":\"在Linux上安装git\",\"t\":[\"使用包管理器进行安装，例如在Ubuntu上：\",\"sudo apt-get install git\"]},\"27\":{\"h\":\"配置git\",\"t\":[\"配置用户名和邮箱（提交代码时需要）：\",\"git config --global user.name \\\"Your Name\\\"\",\"git config --global user.email \\\"your.email@example.com\\\"\",\"查看配置信息：\",\"git config --list\"]},\"28\":{\"h\":\"创建仓库\"},\"29\":{\"h\":\"初始化仓库\",\"t\":[\"在项目根目录执行以下命令：\",\"git init\",\"这将创建一个名为.git的隐藏目录，用于存储仓库数据。\"]},\"30\":{\"h\":\"克隆仓库\",\"t\":[\"从远程仓库克隆一个项目：\",\"git clone \\\"repository_url\\\"\"]},\"31\":{\"h\":\"操作文件\",\"t\":[\"查看文件状态\",\"git status\",\"跟踪文件\",\"将文件添加到暂存区：\",\"git add \\\"file\\\"\",\"将所有文件添加到暂存区：\",\"git add .\",\"提交更改\",\"将暂存区的更改提交到仓库：\",\"git commit -m \\\"Commit message\\\"\",\"查看提交历史\",\"git log\",\"查看简洁的提交历史：\",\"git log --oneline\"]},\"32\":{\"h\":\"分支管理\",\"t\":[\"查看分支\",\"git branch\",\"创建分支\",\"git branch \\\"new_branch_name\\\"\",\"切换分支\",\"git checkout \\\"branch_name\\\"\",\"创建并切换分支\",\"git checkout -b \\\"new_branch_name\\\"\",\"合并分支\",\"将指定分支合并到当前分支：\",\"git merge \\\"branch_name\\\"\",\"删除分支\",\"git branch -d \\\"branch_name\\\"\"]},\"33\":{\"h\":\"远程仓库操作\",\"t\":[\"添加远程仓库\",\"git remote add \\\"remote_name\\\" \\\"repository_url\\\"\",\"查看远程仓库\",\"git remote -v\",\"推送到远程仓库\",\"git push \\\"remote_name\\\" \\\"branch_name\\\"\",\"拉取远程仓库\",\"git pull \\\"remote_name\\\" \\\"branch_name\\\"\",\"删除远程分支\",\"git push \\\"remote_name\\\" --delete \\\"branch_name\\\"\"]},\"34\":{\"h\":\"撤销操作\",\"t\":[\"撤销工作区修改\",\"git checkout -- \\\"file\\\"\",\"撤销暂存区修改\",\"git reset HEAD \\\"file\\\"\",\"回滚到指定提交\",\"git reset --hard \\\"commit_hash\\\"\"]},\"35\":{\"h\":\"git设置代理\",\"t\":[\"电脑上已经启用了代理，浏览器访问 github 很快，但是实际使用中发现 git clone 或者 push 到 github 很慢，经常出现超时。\",\"在网上查了一下，发现 git 默认是不走代理的，需要自己手动设置。方法如下：\"]},\"36\":{\"h\":\"设置代理\",\"t\":[\"这里使用的是 socks5 代理， PORT 是代理的端口号，需根据实际情况替换。我只针对 github 进行了设置，如果还有其他网站需要走代理，可以按照此方法进行设置。\",\"git config --global http.https://github.com.proxy socks5://127.0.0.1:PORT \"]},\"37\":{\"h\":\"取消代理\",\"t\":[\"git config --global --unset http.https://github.com.proxy \"]},\"38\":{\"h\":\"CMake教程\",\"t\":[\"CMake是一个跨平台的管理源代码构建的工具。最初CMake被设计为的Makefile的生成器，现在CMake也可以生成现代的构建系统，如Ninja以及Visual Studio和Xcode等IDE的项目文件。CMake被广泛用于C和C++语言，也可以用于构建其他语言的源代码。\"]},\"39\":{\"h\":\"CMakeLists.txt 文件的编写\",\"t\":[\"CMakeLists.txt 是 CMake 的配置文件，用于定义项目的源代码、依赖项和构建选项。在编写 CMakeLists.txt 文件时，通常需要包括以下几个部分：\"]},\"40\":{\"h\":\"CMake 最低版本要求\",\"t\":[\"在 CMakeLists.txt 文件的开头，需要指定 CMake 的最低版本要求。这可以通过 cmake_minimum_required 命令来实现，例如：\",\"cmake_minimum_required(VERSION 3.10)\"]},\"41\":{\"h\":\"项目名称和源代码\",\"t\":[\"接下来，需要指定项目的名称和源代码。这可以通过 project 和 add_executable 命令来实现，例如：\",\"project(MyProject)\",\"add_executable(my_exe main.cpp)\",\"在这个例子中，我们指定了项目名称为 MyProject，将 main.cpp 文件添加到源代码中，并将生成的可执行文件命名为 my_exe。\"]},\"42\":{\"h\":\"依赖项\",\"t\":[\"如果项目依赖于其他库或框架，需要在 CMakeLists.txt 文件中指定这些依赖项。这可以通过 find_package 命令和 target_link_libraries 命令来实现。例如，如果项目依赖于 Boost 库，可以使用以下命令：\",\"find_package(Boost REQUIRED)\",\"target_link_libraries(my_exe Boost::boost)\"]},\"43\":{\"h\":\"构建选项\",\"t\":[\"最后，需要指定构建选项，例如编译器选项、链接器选项、目标平台等。这可以通过 add_compile_options 命令和 set 命令来实现。\",\"例如，如果要使用 C++11 标准编译源代码，可以使用以下命令：\",\"add_compile_options(-std=c++11)\",\"在编译时启用警告信息可以帮助发现代码中的潜在问题，例如：\",\"add_compile_options(-Wall)\",\"这样可以启用所有警告信息，也可以根据需要启用特定的警告选项。\"]},\"44\":{\"h\":\"项目配置和构建\",\"t\":[\"在编写完 CMakeLists.txt 文件后，就可以进行项目配置和构建了。\",\"下面是基本的项目配置和构建步骤：\"]},\"45\":{\"h\":\"创建构建目录\",\"t\":[\"首先，需要创建一个新的目录，用于构建项目。建议将该目录与源代码目录分开，并将其命名为 build，例如：\",\"mkdir build\",\"cd build\"]},\"46\":{\"h\":\"配置项目\",\"t\":[\"接下来，需要在构建目录中运行 CMake，以配置项目。可以使用以下命令：\",\"cmake /path/to/source\",\"其中，/path/to/source 是源代码目录的路径，一般就是上一层目录 .. 。\",\"在配置项目时，可以指定一些选项，例如构建类型、目标平台等。这些选项可以通过 -D 参数传递给 CMake，例如：\",\"cmake -DCMAKE_BUILD_TYPE=Release /path/to/source 这个命令将指定构建类型为 Release。\"]},\"47\":{\"h\":\"构建项目\",\"t\":[\"配置完成后，就可以构建项目了。\",\"可以使用以下命令：\",\"cmake --build .\",\"这个命令将使用默认的构建工具来构建项目。如果要使用特定的构建工具，可以使用 -G 参数，例如：\",\"cmake -G \\\"Unix Makefiles\\\" --build .\",\"这个命令将使用 Make 构建工具来构建项目，此时也可以直接运行 make 。\"]},\"48\":{\"h\":\"运行项目\",\"t\":[\"构建完成后，就可以运行生成的可执行文件了。如果使用默认的名称和路径，可以使用以下命令：\",\"./my_exe\",\"如果生成的可执行文件位于其他目录中，需要指定其完整路径，例如：\",\"/path/to/build/my_exe\"]},\"49\":{\"h\":\"交叉编译\",\"t\":[\"CMake 支持交叉编译，可以在本地主机上构建针对嵌入式设备的代码。以下是几种不同的配置交叉编译的方法：\"]},\"50\":{\"h\":\"设置交叉编译工具链\",\"t\":[\"在 CMakeLists.txt 文件中，使用 set 命令设置交叉编译工具链，例如：\",\"set(CMAKE_SYSTEM_NAME Linux) set(CMAKE_SYSTEM_PROCESSOR arm) set(CMAKE_C_COMPILER /path/to/arm-linux-gcc) set(CMAKE_CXX_COMPILER /path/to/arm-linux-g++) \",\"这里将系统名称设置为 Linux，处理器设置为 arm，C 编译器和 C++ 编译器设置为 arm-linux-gcc 和 arm-linux-g++，这些设置应根据实际情况进行修改。\",\"可以将以上设置的内容保存到 arm-linux.cmake 文件中，然后在 CMakeLists.txt 中包含进去，例如:\",\"include(/path/to/arm-linux.cmake)\"]},\"51\":{\"h\":\"设置交叉编译器的根路径\",\"t\":[\"在 CMakeLists.txt 文件中，使用 set 命令设置交叉编译器的根路径，例如：\",\"set(CMAKE_FIND_ROOT_PATH /path/to/toolchain/) set(CMAKE_SYSROOT /path/to/sysroot/) \",\"这里将交叉编译器根路径设置为 /path/to/toolchain/，系统根目录设置为 /path/to/sysroot/，这些路径应根据实际情况进行修改。\"]},\"52\":{\"h\":\"传参数指定交叉编译工具链的.cmake文件\",\"t\":[\"使用 -DCMAKE_TOOLCHAIN_FILE 选项指定交叉编译工具链的路径，例如：\",\"cmake -DCMAKE_TOOLCHAIN_FILE=/path/to/arm-linux.cmake ..\",\"这里将交叉编译工具链的路径设置为 /path/to/arm-linux.cmake，这样 CMake 就可以使用交叉编译工具链来生成针对嵌入式设备的代码。\"]},\"53\":{\"h\":\"经验总结\"},\"54\":{\"h\":\"使用变量\",\"t\":[\"使用变量可以使 CMakeLists.txt 文件更加简洁和易读，并且可以方便地修改编译选项和路径等常量。例如：\",\"set(CMAKE_CXX_FLAGS \\\"${CMAKE_CXX_FLAGS} -std=c++11\\\") set(SOURCE_FILES main.cpp) add_executable(my_exe ${SOURCE_FILES}) \",\"CMake 提供了许多内置变量来自定义构建过程，例如：\",\"CMAKE_BUILD_TYPE：指定构建类型，可选值包括：\",\"Debug：用于在没有优化的情况下，使用带有调试符号构建库或可执行文件\",\"Release：用于构建的优化的库或可执行文件，不包含调试符号\",\"RelWithDebInfo：由于构建较少的优化库或可执行文件，包含调试符号\",\"MinSizeRel：用于不增加目标代码大小的优化方式，来构建或可执行文件\",\"CMAKE_INSTALL_PREFIX：指定安装目录的路径。\",\"CMAKE_CXX_COMPILER：指定 C++ 编译器的路径。\",\"使用这些变量可以方便地定制构建过程，以满足特定的需求。\"]},\"55\":{\"h\":\"使用 find_package\",\"t\":[\"使用 find_package 命令可以方便地查找和配置依赖项，例如：\",\"find_package(OpenCV REQUIRED) include_directories(${OpenCV_INCLUDE_DIRS}) target_link_libraries(my_exe ${OpenCV_LIBS}) \",\"这样可以方便地使用 OpenCV 库，而不需要手动指定头文件和库文件路径。\"]},\"56\":{\"h\":\"使用 add_subdirectory\",\"t\":[\"实际项目中，通常会有多个模块，每个模块相当于一个子项目，使用 add_subdirectory 命令可以方便地构建子项目，例如：\",\"add_subdirectory(my_lib)\",\"target_link_libraries(my_exe my_lib)\",\"这样可以方便地使用 my_lib 子项目，并将它链接到 my_exe 可执行文件中。\"]},\"57\":{\"h\":\"使用 configure_file\",\"t\":[\"使用 configure_file 命令可以方便地生成配置文件，例如：\",\"set (VERSION_MAJOR 1) set (VERSION_MINOR 0) set (SOFT_VERSION V${VERSION_MAJOR}.${VERSION_MINOR}) configure_file(config.h.in config.h) include_directories(${CMAKE_CURRENT_BINARY_DIR}) \",\"这样可以在生成过程中自动生成 config.h 文件，并将其包含在项目中。\",\"config.h.in内容如下：\",\"#ifndef CONFIG_H_IN #define CONFIG_H_IN /** * 可配置版本号、日期等信息 */ #define VERSION_MAJOR @VERSION_MAJOR@ #define VERSION_MINOR @VERSION_MINOR@ #define SOFT_VERSION @SOFT_VERSION@ #endif \"]},\"58\":{\"h\":\"自定义构建规则\",\"t\":[\"使用 add_custom_command 和 add_custom_target 命令可以方便地添加自定义构建规则，例如：\",\"add_custom_command( OUTPUT my_output.txt COMMAND my_command arg1 arg2 > my_output.txt DEPENDS my_input.txt ) add_custom_target(my_target DEPENDS my_output.txt) \",\"这样可以在编译过程中执行自定义命令，并生成指定的输出文件。\"]},\"59\":{\"h\":\"获取文件夹名称\",\"t\":[\"get_filename_component(CURRENT_FOLDER ${CMAKE_CURRENT_SOURCE_DIR} NAME)\"]},\"60\":{\"h\":\"C语言的内存分布\",\"t\":[\"C 程序的典型内存由文本段、数据段、堆和栈4部分组成：\"]},\"61\":{\"h\":\"1. 文本段（Text Segment、代码段、代码区）\",\"t\":[\"文本段，也称为代码段或简称为文本，是目标文件或内存中程序的一部分，其中包含可执行指令。文本段放在堆或栈的下面，以防止堆和栈溢出覆盖它。\",\"文本段通常是可共享的，因此对于频繁执行的程序，内存中只需要一个副本。此外，文本段通常是只读的，以防止程序意外修改其指令。\"]},\"62\":{\"h\":\"2. 数据段（Data Segment、全局/静态数据段、全局/静态存储区）\",\"t\":[\"分为两部分：\"]},\"63\":{\"h\":\"2.1 已初始化数据段（Initialized Data Segment）\",\"t\":[\"初始化数据段，通常简称为Data Segment。数据段是程序虚拟地址空间的一部分，其中包含由程序员初始化的全局变量和静态变量。数据段不是只读的，因为变量的值可以在运行时更改。\",\"该段又可以分为初始化只读区和初始化读写区。 比如C语言中char s[] = \\\"hello world\\\"定义的全局字符串和main外（即global）的int debug=1这样的C语句，都会存放在初始化的读写区中。而像const char* string = \\\"hello world\\\"这样的全局C语句使得字符串文字\\\"hello world\\\"存储在初始化的只读区，字符指针变量string存储在初始化的读写区。\"]},\"64\":{\"h\":\"2.2 未初始化的数据段（Uninitialized Data Segment、BSS）\",\"t\":[\"未初始化的数据段通常称为BSS段，代表“由符号开始的块（block started by symbol）”。在程序开始执行之前，该段中的数据由内核初始化为 0 。未初始化的数据从数据段的末尾开始，包含所有初始化为零或在源代码中没有显式初始化的全局变量和静态变量。例如：声明为 static int i 的变量将包含在 BSS 段中；声明为 int j 的全局变量将包含在 BSS 段中。\"]},\"65\":{\"h\":\"3. 堆（Heap）\",\"t\":[\"堆是一个可以动态使用的大内存，这一部分内存不是自动管理的，你必须显式地申请（使用如malloc之类的函数）和释放内存（如free）。在变量使用结束时释放内存失败会造成内存泄漏，内存仍然被占用，不能被其它进程获取。与栈区不同，堆区除了物理内存的大小通常没有大小的限制（或者创建变量数量的限制）。在堆区创建的变量可以在程序的任何地方访问。而且堆区内存访问需要用到指针。\"]},\"66\":{\"h\":\"4. 栈（Stack）\",\"t\":[\"栈存放局部变量的值、函数调用所需要维护的信息等，由编译器自动分配释放。它是一个LIFO（Last In First Out，后进先出）的结构。每当一个函数声明一个新的变量它将被压入栈中。当一个函数运行结束后，这个函数所有在栈中相关的变量都将被删除，而且它们所占用的内存将会被释放。注意栈区的大小通常都由一个限制，根据操作系统的不同有所不同。如果一个程序尝试将过多的信息放入栈中将会发生栈溢出。栈溢出发生在所有栈区的内存都被分配完，如果继续分配将会溢出至内存的其它部分。在不恰当地使用递归时也会发生栈溢出。\"]},\"67\":{\"h\":\"关于 C++ 程序的自由存储区（free store）\",\"t\":[\"自由存储区是C++中通过new和delete动态分配和释放对象的抽象概念，通过new来申请的内存区域可称为自由存储区。基本上，所有的C++编译器默认使用堆来实现自由存储，也即是缺省的全局运算符new和delete也许会按照malloc和free的方式来被实现，这时藉由new运算符分配的对象，说它在堆上也对，说它在自由存储区上也正确。但程序员也可以通过重载操作符，改用其他内存来实现自由存储，例如全局变量做的对象池，这时自由存储区就区别于堆了。\"]},\"68\":{\"h\":\"C++ 性能优化\"},\"69\":{\"h\":\"原则\",\"t\":[\"《More Effective C++》书中效率部分第一条就是80—20准则。说得是——大约 20％的代码使用了 80％的程序资源；大约 20%的代码耗用了大约 80％的运行时间；大约 20％的代码使用了 80％的内存。因此，一些简单的优化也能显著提高程序性能。\",\"先完成程序功能，再考虑性能优化的事，否则会出现代码可读性差，过度抽象等问题。\",\"大部分的性能优化其实都是在做时间和空间的权衡，空间换时间，或者时间换空间。\",\"良好的代码风格和代码规范能有效的避免性能问题的出现，所以code review也很重要。\",\"大幅度的提升程序性能需要借助程序分析器（profiler）寻找出程序的性能瓶颈，针对这个瓶颈进行代码层面，算法层面，架构层面等多方面的优化。\"]},\"70\":{\"h\":\"常用优化方法\",\"t\":[\"空间足够时，可以将经常需要读取的资源，缓存在内存中。\",\"尽量减少大内存对象的构造与析构，考虑缓存暂时不用的对象，等待后续继续使用。\",\"尽量使用C++11的右值语义，减少临时对象的构造。\",\"简单的功能函数可以使用内联。少用继承，多用组合，尽量减少继承层级。\",\"在循环遍历时，优化判断条件，减少循环次数。\",\"优化线程或进程的同步方式，能用原子操作的就不用锁。能应用层同步的就不用内核对象同步。\",\"优化堆内存的使用，如果有内存频繁的申请与释放，可以考虑内存池。\",\"优化线程的使用，节省系统资源与切换造成的性能损耗，线程使用频繁的可以考虑线程池。\",\"尽量使用事件通知，谨慎使用轮循或者sleep函数。\",\"界面开发中，耗时的业务代码不要放在UI线程中执行，使用单独的线程去异步处理耗时业务，提高界面响应速度。\",\"经常重构、优化代码结构。优化算法或者架构，从设计层面进行性能的优化。\"]},\"71\":{\"h\":\"list的实现\",\"t\":[\"C++标准库中的list是一个双向链表，可以支持在任意位置插入和删除元素，并且具有快速的插入和删除效率。\",\"与vector相比，list的主要区别在于：\",\"存储结构：vector采用连续的内存空间存储元素，而list采用链式结构存储元素。\",\"随机访问：vector支持随机访问，可以通过下标访问元素；而list不支持随机访问，只能通过迭代器遍历元素。\",\"插入和删除：vector在末尾插入和删除元素的效率很高，但在中间插入和删除元素时效率较低，因为需要移动其他元素；而list在任意位置插入和删除元素的效率都很高，因为只需要修改相邻节点的指针。\",\"内存分配：vector在内存空间不足时会自动扩容，会重新分配一块更大的内存空间，并将原有元素复制到新的内存空间中；而list的内存分配是动态的，每次插入一个元素都会分配一块新的内存空间。\",\"下面详细说明C++ list的实现过程：\",\"定义节点结构体 list的节点结构体包含三个成员变量：数据、前驱指针和后继指针。在创建节点时，需要为数据、前驱指针和后继指针赋初值，通常使用默认构造函数或带参数的构造函数来实现。\",\"定义迭代器类 list的迭代器类是一个指向节点的指针，可以通过指针的前移和后移来实现遍历。在创建迭代器时，需要指定指向的节点。\",\"定义list类 list的类包含两个成员变量：头节点指针和尾节点指针。在创建list对象时，头节点和尾节点都是空节点，即指向null。\",\"实现list的成员函数\",\"(1) size()函数：遍历链表，统计元素个数。\",\"(2) clear()函数：遍历链表，释放所有节点。\",\"(3) push_front()函数：创建一个新节点，插入到头节点之后。\",\"(4) push_back()函数：创建一个新节点，插入到尾节点之前。\",\"(5) pop_front()函数：删除头节点之后的节点，并释放内存。\",\"(6) pop_back()函数：删除尾节点之前的节点，并释放内存。\",\"(7) insert()函数：在指定位置插入一个新节点。\",\"(8) erase()函数：删除指定位置的节点，并释放内存。\",\"实现list的赋值运算符 list的赋值运算符需要先清空原有的元素，然后将指定的list的元素复制到当前list中。\",\"下面是一个简化版的list实现源码：\",\"template<typename T> class list { public: struct Node { T data; Node* prev; Node* next; Node(const T& d = T(), Node* p = nullptr, Node* n = nullptr) : data(d), prev(p), next(n) {} }; class iterator { public: iterator() : node(nullptr) {} explicit iterator(Node* n) : node(n) {} iterator& operator++() { node = node->next; return *this; } iterator& operator--() { node = node->prev; return *this; } T& operator*() { return node->data; } Node* getNode() const { return node; } bool operator==(const iterator& other) const { return node == other.node; } bool operator!=(const iterator& other) const { return node != other.node; } private: Node* node; }; list() : head(new Node()), tail(new Node()) { head->next = tail; tail->prev = head; } ~list() { clear(); delete head; delete tail; } list(const list& other) : list() { for (auto& x : other) { push_back(x); } } list& operator=(list other) { swap(other); return *this; } void push_front(const T& value) { insert(begin(), value); } void push_back(const T& value) { insert(end(), value); } void pop_front() { erase(begin()); } void pop_back() { erase(--end()); } iterator insert(iterator pos, const T& value) { Node* p = pos.getNode(); Node* new_node = new Node(value, p->prev, p); p->prev->next = new_node; p->prev = new_node; return iterator(new_node); } iterator erase(iterator pos) { Node* p = pos.getNode(); iterator next(p->next); p->prev->next = p->next; p->next->prev = p->prev; delete p; return next; } void clear() { while (!empty()) { erase(begin()); } } bool empty() const { return head->next == tail; } size_t size() const { size_t n = 0; for (auto it = begin(); it != end(); ++it) { ++n; } return n; } void swap(list& other) { std::swap(head, other.head); std::swap(tail, other.tail); } iterator begin() const { return iterator(head->next); } iterator end() const { return iterator(tail); } private: Node* head; Node* tail; }; \"]},\"72\":{\"h\":\"shared_ptr智能指针\",\"t\":[\"C++中的shared_ptr是一种智能指针，它是通过引用计数来管理动态内存的。shared_ptr的实现过程可以简单地概括为以下几个步骤：\",\"创建一个shared_ptr对象时，它会初始化一个引用计数，该计数初始化为1，并将指针指向动态内存。\",\"当一个shared_ptr对象被复制时，它的引用计数会增加1。这是通过将新的shared_ptr对象的引用计数指向原始对象的引用计数来实现的。\",\"当一个shared_ptr对象被销毁时，它的引用计数会减少1。如果引用计数变为0，则意味着没有任何shared_ptr对象引用该动态内存，此时会自动释放该动态内存。\",\"当一个shared_ptr对象被赋值给另一个shared_ptr对象时，它们共享同一个引用计数。这是通过将两个shared_ptr对象的引用计数指向同一个对象来实现的。\",\"shared_ptr对象还提供了自定义删除器的功能，可以在释放动态内存时调用指定的删除器函数。\",\"具体实现上，shared_ptr对象内部有一个指向控制块的指针，控制块包含了引用计数和指向动态内存的指针。每个shared_ptr对象都共享同一个控制块，通过引用计数来管理动态内存的生命周期。\",\"shared_ptr的实现还使用了模板和模板特化的技术，使得它可以适用于不同类型的动态内存。此外，shared_ptr还采用了线程安全的引用计数实现，以保证多线程环境下的正确性。\",\"下面是一个使用原子操作实现的线程安全的shared_ptr类的源码示例：\",\"#include <atomic> #include <iostream> template <typename T> class SharedPtr { public: SharedPtr() : ptr(nullptr), ref_count(new std::atomic<int>(1)) {} SharedPtr(T* p) : ptr(p), ref_count(new std::atomic<int>(1)) {} SharedPtr(const SharedPtr<T>& other) : ptr(other.ptr), ref_count(other.ref_count) { if (ref_count) { ++(*ref_count); } } ~SharedPtr() { if (ref_count && --(*ref_count) == 0) { delete ptr; delete ref_count; } } SharedPtr<T>& operator=(const SharedPtr<T>& other) { if (this != &other) { if (ref_count && --(*ref_count) == 0) { delete ptr; delete ref_count; } ptr = other.ptr; ref_count = other.ref_count; if (ref_count) { ++(*ref_count); } } return *this; } T* operator->() const { return ptr; } T& operator*() const { return *ptr; } int use_count() const { return ref_count ? *ref_count : 0; } private: T* ptr; std::atomic<int>* ref_count; }; \",\"在上面的实现中，我们使用了std::atomic<int>来定义引用计数，从而保证了线程安全。具体实现时，在shared_ptr的构造函数中，我们使用new std::atomic<int>(1)来创建一个初始值为1的std::atomic<int>对象，然后在拷贝构造函数、析构函数、赋值操作等中使用原子操作来更新引用计数。\",\"需要注意的是，由于std::atomic<T>对象的构造和析构是线程安全的，因此我们可以在构造函数和析构函数中直接使用new和delete来分配和释放std::atomic<int>对象的内存，而不需要使用互斥锁或者其他线程安全的手段。\",\"使用上述实现方式，我们可以在多线程环境下安全地使用shared_ptr，而不需要担心线程安全问题。\"]},\"73\":{\"h\":\"vector的实现\"},\"74\":{\"h\":\"原理\",\"t\":[\"C++标准库中的vector是一个动态数组，具有自动扩容的功能。它的实现原理可以分为以下几个方面：\",\"内存分配：vector使用new运算符来分配内存，同时在析构函数中使用delete[]运算符来释放内存。vector在内存空间不足时会自动扩容，扩容时会重新分配一块更大的内存空间，并将原有元素复制到新的内存空间中。\",\"元素访问：vector支持随机访问，可以通过下标访问元素。vector内部使用一个指针来指向第一个元素的内存地址，通过指针加上下标的偏移量来访问指定元素的内存地址。\",\"元素插入和删除：vector支持在末尾添加元素和删除末尾元素。在插入元素时，如果vector的内存空间不足，vector会自动扩容，并将新元素插入到末尾；在删除元素时，vector会调用元素的析构函数来销毁元素，并将size减1。\",\"迭代器：vector支持迭代器，可以使用迭代器来遍历vector中的元素。vector的迭代器类型是指向元素的指针。\",\"内存分配策略：为了提高vector的性能，C++标准库中的vector通常采用了一些内存分配策略，例如预分配内存空间、空间复用、指针交换等。这些策略可以减少内存分配和复制的次数，提高vector的效率。\",\"总的来说，C++ vector的实现原理基于动态数组，具有自动扩容的功能，并且使用一些优化策略来提高效率。\"]},\"75\":{\"h\":\"源码\",\"t\":[\"下面是一个简化版的vector实现源码：\",\"template<typename T> class vector { public: typedef T* iterator; vector() : data(nullptr), size(0), capacity(0) {} explicit vector(size_t n) : data(new T[n]), size(n), capacity(n) {} vector(const vector& other) : data(new T[other.capacity]), size(other.size), capacity(other.capacity) { std::copy(other.begin(), other.end(), begin()); } ~vector() { delete[] data; } vector& operator=(const vector& other) { if (this != &other) { vector tmp(other); swap(tmp); } return *this; } void reserve(size_t new_capacity) { if (new_capacity > capacity) { T* new_data = new T[new_capacity]; std::copy(begin(), end(), new_data); delete[] data; data = new_data; capacity = new_capacity; } } void resize(size_t new_size) { reserve(new_size); for (size_t i = size; i < new_size; ++i) { data[i] = T(); } size = new_size; } void push_back(const T& value) { if (size == capacity) { reserve(capacity == 0 ? 1 : capacity * 2); } data[size++] = value; } void pop_back() { --size; data[size].~T(); } void clear() { for (size_t i = 0; i < size; ++i) { data[i].~T(); } size = 0; } bool empty() const { return size == 0; } size_t size() const { return size; } size_t capacity() const { return capacity; } T* begin() { return data; } T* end() { return data + size; } const T* begin() const { return data; } const T* end() const { return data + size; } private: T* data; size_t size; size_t capacity; void swap(vector& other) { std::swap(data, other.data); std::swap(size, other.size); std::swap(capacity, other.capacity); } }; \",\"在上面的实现中使用了模板类来定义vector，可以支持任意类型的元素。在vector的核心实现中使用了一个指针data来存储元素的内存地址，size表示当前元素数量，capacity表示当前vector分配的内存容量。具体实现中使用new运算符来分配内存，并且在析构函数中使用delete[]运算符来释放内存。\",\"vector的实现中还包含了一些常用的成员函数，例如reserve、resize、push_back、pop_back和clear等，这些函数实现了vector的自动扩容和元素操作功能。\",\"需要注意的是，以上是一个简化版的vector实现，实际上C++标准库中的vector实现相对复杂，包含了很多细节和优化。\"]},\"76\":{\"h\":\"关于C++就业方向\",\"t\":[\"C++作为一门编程语言，相对于Java和JavaScript来说，就业方向是很不确定的。\",\"虽然C++的应用方向非常广泛，涵盖数据库、自动驾驶、量化交易、高性能计算、嵌入式开发、音视频开发、QT开发、图像处理、游戏开发等许多领域，但实际上，每个方向的C++岗位都不算多。\",\"这些C++方向除了使用C++语言之外，实际上没有太多的交集与相同点。它们分属不同的行业与技术领域，在工程实践中涉及的技能与知识也大相径庭。因此，一名在某一方向，例如游戏开发，有相当工作经验的 C++工程师，未必能很快地切换到另一方向，如嵌入式开发，并快速达到同等工作能力。不同方向的学习成本与切换成本也会较高，切换方向很可能降低涨薪幅度，从而降低了C++工程师的职业流动性。\"]},\"77\":{\"h\":\"动态库开发\",\"t\":[\"动态库是一种可以在程序运行时被动态加载的共享库，它包含了一组函数和数据，可以被多个程序共享使用，在C/C++代码重用和模块化开发中有着广泛的应用。动态库通常采用共享对象文件（.so）或者动态链接库文件（.dll）的格式存储在磁盘上。本文将介绍动态库的开发方法以及注意事项，帮助了解如何编写高质量的动态库。\"]},\"78\":{\"h\":\"导出函数\",\"t\":[\"编写要导出的函数时，需要使用特殊的关键字和修饰符来标识它们是动态库的导出函数。\",\"例如，在Linux系统下，可以使用__attribute__((visibility(\\\"default\\\")))修饰符来标识：\",\"__attribute__((visibility(\\\"default\\\"))) int add(int a, int b) { return a + b; } \",\"在Windows系统下，可以使用__declspec(dllexport)关键字来标识：\",\"__declspec(dllexport) int add(int a, int b) { return a + b; } \"]},\"79\":{\"h\":\"使用 extern \\\"C\\\"\",\"t\":[\"对于C++写的动态库，还需要加上extern \\\"C\\\"，代码如下：\",\"#ifdef __cplusplus extern \\\"C\\\" { #endif int add(int a, int b) { return a + b; } #ifdef __cplusplus } #endif \",\"使用extern \\\"C\\\"主要有两个作用：\",\"解决C++的函数名称重载问题。在C++中，同一个函数名可以对应多个不同的函数，这就是函数名称重载问题。而在动态库中，函数的名称通常会被记录在符号表中，如果不做处理，就会导致符号表中出现多个同名函数，从而导致链接错误。为避免同名，C++ 编译器会产生像 _add_int_int 之类的名字（不同的编译器可能生成的名字不同，但是都采用了相同的机制，生成的新名字称为 mangled name ）。使用extern \\\"C\\\"可以将函数的名称转换为C语言风格的名称，从而避免函数名称重载问题。\",\"避免C++异常处理机制的影响。在C++中，异常处理机制是通过一系列特殊的函数和数据结构来实现的。而在C语言中并没有异常处理机制，因此在使用C++动态库时，如果不使用extern \\\"C\\\"修饰符，就可能会受到C++异常处理机制的影响，导致程序出现异常而无法正常运行。使用extern \\\"C\\\"可以将函数的调用惯例设置为C语言风格的调用惯例，避免受到C++异常处理机制的影响，从而使动态库更加稳定和可靠。\",\"例如，在C++动态库中定义一个函数，使用了C++的异常处理机制：\"]},\"80\":{\"h\":\"编译源文件\",\"t\":[\"在Linux系统下，可以使用以下命令将目标文件编译成动态库文件：\",\"g++ -shared -fPIC -o libmylib.so mylib.o \",\"其中，-shared选项表示生成动态库文件，-选项表示生成与位置无关代码，-o选项指定生成的动态库文件名，mylib.o是编译生成的目标文件。\"]},\"81\":{\"h\":\"动态加载和编译时链接\",\"t\":[\"动态加载和编译时链接动态库的区别主要在于时机和方式的不同:\",\"动态加载是在运行时进行的，它需要使用特定的系统调用或语言 API 去查找、装入并绑定指定的动态库，更加灵活，但是装入过程需要耗费一定的时间和资源，并且绑定失败也有一定几率。\",\"静态链接是在编译时进行的，需要在编译器链入所需的动态库，更加高效，但缺少运行时灵活性和动态调整能力。\",\"在实际应用中，通常会灵活结合这两种方式：静态地预先连接常用的基本库，以提高效率；动态地连接其它额外需要的动态扩展库或插件，以增强灵活性。\"]},\"82\":{\"h\":\"链接动态库\",\"t\":[\"在Linux系统下，可以使用以下命令将动态库文件链接到程序中：\",\"g++ -o myapp main.o -L. -lmylib\",\"其中，-L选项指定动态库文件的路径，-l选项指定动态库文件的名称，myapp是生成的可执行文件名，main.o是程序的入口文件。\"]},\"83\":{\"h\":\"使用动态库\",\"t\":[\"在Linux系统下，可以使用以下函数来动态加载和卸载动态库：\",\"#include <dlfcn.h> void* handle = dlopen(\\\"./libmylib.so\\\", RTLD_LAZY); if (handle == NULL) { // 动态库加载失败 } int (*add)(int, int) = (int (*)(int, int))dlsym(handle, \\\"add\\\"); if (add == NULL) { // 导出函数获取失败 } int result = add(1, 2); int ret = dlclose(handle); if (ret != 0) { // 动态库卸载失败 } \",\"其中，dlopen函数用来加载动态库文件，返回一个句柄，如果加载失败则返回NULL。dlsym函数用来获取动态库文件中导出的函数和数据，返回一个指针，如果获取失败则返回NULL。dlclose函数用来卸载动态库文件，返回0表示成功，否则表示失败。\",\"在Windows系统下，可以使用以下函数来动态加载和卸载动态库：\",\"#include <windows.h> HINSTANCE handle = LoadLibraryA(\\\"mylib.dll\\\"); if (handle == NULL) { // 动态库加载失败 } typedef int (*AddFunc)(int, int); AddFunc add = (AddFunc)GetProcAddress(handle, \\\"add\\\"); if (add == NULL) { // 导出函数获取失败 } int result = add(1, 2); BOOL ret = FreeLibrary(handle); if (ret == FALSE) { // 动态库卸载失败 } \",\"其中，LoadLibraryA函数用来加载动态库文件，返回一个句柄，如果加载失败则返回NULL。GetProcAddress函数用来获取动态库文件中导出的函数和数据，返回一个指针，如果获取失败则返回NULL。FreeLibrary函数用来卸载动态库文件，返回非0表示成功，否则表示失败。\"]},\"84\":{\"h\":\"动态库路径规范\",\"t\":[\"Linux系统中的动态库路径规范如下：\",\"系统级动态库存放在/lib和/usr/lib目录下。\",\"应用程序级动态库存放在/usr/local/lib目录下。\",\"动态库文件的命名应该遵循一定的规则，包括前缀、版本号和扩展名，具体规则如下： \",\"动态库文件的前缀应该为\\\"lib\\\"。\",\"动态库文件的版本号应该采用\\\"主版本号.次版本号.发布号\\\"的格式，例如libmylib.so.1.2.3。\",\"动态库文件的扩展名应该为\\\".so\\\"。\"]},\"85\":{\"h\":\"编译链接时指定动态库路径\",\"t\":[\"在编译和链接动态库时，可以使用以下方法指定动态库的路径：\",\"使用编译器的-L选项\",\"可以使用编译器的-L选项指定动态库的搜索路径，例如：\",\"gcc -o myprogram myprogram.c -L/path/to/mylib -lmylib\",\"其中，-L选项指定了动态库的搜索路径，-l选项指定了要链接的动态库名称。在这个例子中，编译器将在/path/to/mylib目录下搜索名为libmylib.so的动态库文件。\",\"使用环境变量LD_LIBRARY_PATH\",\"可以使用环境变量LD_LIBRARY_PATH指定动态库的搜索路径，例如：\",\"export LD_LIBRARY_PATH=/path/to/mylib:$LD_LIBRARY_PATH\",\"./myprogram\",\"其中，LD_LIBRARY_PATH环境变量指定了动态库的搜索路径。在这个例子中，执行myprogram时，操作系统将在/path/to/mylib目录下搜索动态库文件。\",\"需要注意的是，LD_LIBRARY_PATH环境变量可能会影响系统的安全性和稳定性，因此建议尽量不要使用它来指定动态库的路径。\"]},\"86\":{\"h\":\"使用-rpath参数\",\"t\":[\"使用-rpath参数也可以指定动态库的路径。-rpath参数是用于指定运行时动态库搜索路径的选项，它会将指定的路径添加到可执行程序的运行时搜索路径中，以便在程序运行时能够正确地加载动态库。\",\"例如：\",\"gcc -o myprogram myprogram.c -L/path/to/mylib -Wl,-rpath=/path/to/mylib -lmylib\",\"其中，-Wl,-rpath=/path/to/mylib选项指定了运行时动态库搜索路径。在这个例子中，编译器将在/path/to/mylib目录下搜索名为libmylib.so的动态库文件，并将该目录添加到可执行程序的运行时搜索路径中。\",\"需要注意的是，使用-rpath参数可能会引起安全和稳定性问题，因此建议尽量避免使用它，除非确实需要在非标准路径下搜索动态库文件，并且能够保证动态库文件的安全性和稳定性。如果可能的话，应该使用其他更安全和可靠的方法来指定动态库的路径。\"]},\"87\":{\"h\":\"使用CMake构建动态库\",\"t\":[\"使用CMake构建动态库的步骤如下：\",\"在CMakeLists.txt文件中，添加动态库的目标，并指定源文件：\",\"add_library(mylib SHARED mylib.cpp)\",\"这里使用add_library命令创建一个名为mylib的动态库，并指定源文件为mylib.cpp。\",\"在CMakeLists.txt文件中，指定动态库的输出路径和名称：\",\"set_target_properties(mylib PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib LIBRARY_OUTPUT_NAME mylib ) \",\"这里使用set_target_properties命令设置动态库的输出路径为${CMAKE_BINARY_DIR}/lib，输出文件名为mylib。\"]},\"88\":{\"h\":\"使用CMake链接动态库\",\"t\":[\"在CMake中链接动态库的方法如下：\",\"在CMakeLists.txt文件中，使用find_library命令查找动态库：\",\"find_library(MYLIB mylib PATHS ${CMAKE_BINARY_DIR}/lib)\",\"这里使用find_library命令查找名为mylib的动态库，搜索路径为${CMAKE_BINARY_DIR}/lib。\",\"在CMakeLists.txt文件中，将动态库链接到目标文件：\",\"target_link_libraries(myapp ${MYLIB})\",\"这里使用target_link_libraries命令将动态库链接到名为myapp的目标文件。\"]},\"89\":{\"h\":\"相关技巧\"},\"90\":{\"h\":\"查看版本号\",\"t\":[\"在Linux系统中，有些动态库的版本号没有写在文件名中，由于文件名很容易被改动，文件名中的版本号也不一定是真的，真的版本号是在动态库文件内的SONAME里面，可通过以下两种命令查看：\",\"readelf -d libmylib.so objdump -p libmylib.so | grep SONAME \"]},\"91\":{\"h\":\"查看被依赖项\",\"t\":[\"ldd是一个Linux命令，它用于查看一个二进制可执行文件或共享库所依赖的动态链接库（也称为共享对象）的列表。ldd命令可以帮助用户诊断软件运行时出现的问题，例如缺少某些动态链接库、动态链接库版本不兼容等问题。\",\"ldd如果加上-r参数，ldd命令将会显示动态链接库的重定位信息，包括重定位表的地址、符号名称、类型等信息，可以得知动态链接库中是否存在未解决的符号引用或符号冲突等问题。\",\"ldd -r myapp ldd -r libmylib.so \"]},\"92\":{\"h\":\"设计模式\"},\"93\":{\"h\":\"设计模式简介\",\"t\":[\"设计模式（Design Patterns），就是设计过程中可以反复使用的、可以解决特定问题的设计方法。\",\"在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。\",\"四位作者合称 GOF（四人帮，全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面向对象设计原则：对接口编程而不是对实现编程，优先使用对象组合而不是继承。\"]},\"94\":{\"h\":\"设计模式七大原则\"},\"95\":{\"h\":\"开闭原则（Open Close Principle）\",\"t\":[\"开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\"]},\"96\":{\"h\":\"里氏代换原则（Liskov Substitution Principle）\",\"t\":[\"里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\"]},\"97\":{\"h\":\"依赖倒转原则（Dependence Inversion Principle）\",\"t\":[\"这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\"]},\"98\":{\"h\":\"接口隔离原则（Interface Segregation Principle）\",\"t\":[\"这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\"]},\"99\":{\"h\":\"迪米特法则，又称最少知道原则（Demeter Principle）\",\"t\":[\"最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\"]},\"100\":{\"h\":\"合成复用原则（Composite Reuse Principle）\",\"t\":[\"合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\"]},\"101\":{\"h\":\"单一职责原则（Single responsibility principle）\",\"t\":[\"一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中，另外一种定义：就一个类而言，应该仅有一个引起它变化的原因。\"]},\"102\":{\"h\":\"设计模式分类\"},\"103\":{\"h\":\"从目的对模式分类\"},\"104\":{\"h\":\"创建型模式\",\"t\":[\"创建型（Creational）模式：将对象的部分创建工作延迟到子类或者其他对象，从而应对需求变化为对象创建时具体类型实现引来的冲击。\",\"工厂模式（Factory Pattern）\",\"抽象工厂模式（Abstract Factory Pattern）\",\"单例模式（Singleton Pattern）\",\"建造者模式（Builder Pattern）\",\"原型模式（Prototype Pattern）\"]},\"105\":{\"h\":\"结构型模式\",\"t\":[\"结构型（Structural）模式：通过类继承或者对象组合获得更灵活的结构，从而应对需求变化为对象的结构带来的冲击。\",\"适配器模式（Adaptor Pattern）\",\"桥接模式（Bridge Pattern）\",\"过滤器模式（Filter Pattern）\",\"组合模式（Composite Pattern）\",\"装饰器模式（Decorator Pattern）\",\"外观模式（Facade Pattern）\",\"享元模式（Flyweight Pattern）\",\"代理模式（Proxy Pattern）\"]},\"106\":{\"h\":\"行为型模式\",\"t\":[\"行为型（Behavioral）模式：通过类继承或者对象组合来划分类与对象间的职责，从而应对需求变化为多个交互的对象带来的冲击。\",\"责任链模式（Chain of Responsibility Pattern）\",\"命令模式（Command Pattern）\",\"解释器模式（Interpreter Pattern）\",\"迭代器模式（Iterator Pattern）\",\"中介者模式（Mediator Pattern）\",\"备忘录模式（Memento Pattern）\",\"观察者模式（Observer Pattern）\",\"状态模式（State Pattern）\",\"空对象模式（Null Object Pattern）\",\"策略模式（Strategy Pattern）\",\"模板方法模式（Template Method Pattern）\",\"访问者模式（Visitor Pattern）\"]},\"107\":{\"h\":\"从封装变化角度对模式分类\",\"t\":[\"组件协作 \",\"Template Method\",\"Strategy\",\"Observer/Event\",\"单一职责 \",\"Decorator\",\"Bridge\",\"对象创建 \",\"Factory Method\",\"Abstract Factory\",\"Prototype\",\"Builder\",\"对象性能 \",\"Singleton\",\"Flyweight\",\"接口隔离 \",\"Facade\",\"Proxy\",\"Mediator\",\"Adapter\",\"状态变化 \",\"Memento\",\"State\",\"数据结构 \",\"Composite\",\"Iterator\",\"Chain of Resposibility\",\"行为变化 \",\"Command\",\"Visitor\",\"领域问题 \",\"Interpreter\"]},\"108\":{\"h\":\"静态库开发\"},\"109\":{\"h\":\"静态库与动态库的区别\",\"t\":[\"静态库：在链接时，静态库的对象文件直接加入到目标文件中，生成可执行文件。运行时不需要加载静态库。\",\"动态库：在链接时，只有动态库的引用加入到目标文件中，生成可执行文件。运行时需要加载动态库,然后调用动态库中的函数。\",\"静态库文件扩展名为 .a ，动态库文件扩展名为 .so (Linux)或 .dll (Windows)。\",\"静态库在编译和链接时 resolved，动态库在运行时 resolved。\",\"静态库会增加程序的体积，而动态库可以被多个程序共享，减小体积。\",\"动态库可以在不重新编译程序的情况下进行更新，而静态库的更新需要重新编译链接。\"]},\"110\":{\"h\":\"静态库开发方法\",\"t\":[\"编写源文件。单独编译成目标文件(.o文件)。\",\"使用ar命令打包多个目标文件成一个库文件。\",\"ar rcs libxxx.a xxx1.o xxx2.o ...\",\"ranlib工具为静态库建立索引，加速链接过程。\",\"ranlib libxxx.a\",\"在程序中用 -lxxx 标志链接静态库。\",\"查看静态库包含哪些目标文件：ar -t libxxx.a\"]},\"111\":{\"h\":\"使用CMake构建静态库\"},\"112\":{\"h\":\"指定库的名称\",\"t\":[\"add_library(xxx STATIC xxx1.c xxx2.c ...)\"]},\"113\":{\"h\":\"生成静态库libxxx.a\",\"t\":[\"set_target_properties(xxx PROPERTIES OUTPUT_NAME \\\"xxx\\\")\"]},\"114\":{\"h\":\"手动指定库文件名\",\"t\":[\"set_target_properties(xxx PROPERTIES PREFIX \\\"lib\\\" SUFFIX \\\".a\\\" OUTPUT_NAME \\\"xxx\\\")\"]},\"115\":{\"h\":\"去掉库文件名前缀\",\"t\":[\"set_target_properties(xxx PROPERTIES PREFIX \\\"\\\")\"]},\"116\":{\"h\":\"把静态库放进动态库\",\"t\":[\"target_link_libraries(xxx -Wl,--whole-archive libmmm.a libnnn.a -Wl,--no-whole-archive)\"]},\"117\":{\"h\":\"Git笔记\"},\"118\":{\"h\":\"Cpp笔记\"}},\"dirtCount\":0,\"index\":[[\"把静态库放进动态库\",{\"0\":{\"116\":1}}],[\"去掉库文件名前缀\",{\"0\":{\"115\":1}}],[\"去查找\",{\"1\":{\"81\":1}}],[\"手动指定库文件名\",{\"0\":{\"114\":1}}],[\"标志链接静态库\",{\"1\":{\"110\":1}}],[\"标准编译源代码\",{\"1\":{\"43\":1}}],[\"加速链接过程\",{\"1\":{\"110\":1}}],[\"减小体积\",{\"1\":{\"109\":1}}],[\"减少循环次数\",{\"1\":{\"70\":1}}],[\"减少临时对象的构造\",{\"1\":{\"70\":1}}],[\"或\",{\"1\":{\"109\":1}}],[\"或者动态链接库文件\",{\"1\":{\"77\":1}}],[\"或者时间换空间\",{\"1\":{\"69\":1}}],[\"或者创建变量数量的限制\",{\"1\":{\"65\":1}}],[\"或者\",{\"1\":{\"3\":1,\"20\":1,\"35\":1}}],[\"生成静态库libxxx\",{\"0\":{\"113\":1}}],[\"生成可执行文件\",{\"1\":{\"109\":2}}],[\"生成的新名字称为\",{\"1\":{\"79\":1}}],[\"领域问题\",{\"1\":{\"107\":1}}],[\"行为变化\",{\"1\":{\"107\":1}}],[\"行为型\",{\"1\":{\"106\":1}}],[\"行为型模式\",{\"0\":{\"106\":1}}],[\"状态变化\",{\"1\":{\"107\":1}}],[\"状态模式\",{\"1\":{\"106\":1}}],[\"组件协作\",{\"1\":{\"107\":1}}],[\"组合模式\",{\"1\":{\"105\":1}}],[\"模板方法模式\",{\"1\":{\"106\":1}}],[\"模式\",{\"1\":{\"104\":1,\"105\":1,\"106\":1}}],[\"模式快很多\",{\"1\":{\"12\":1}}],[\"模式会比\",{\"1\":{\"12\":1}}],[\"策略模式\",{\"1\":{\"106\":1}}],[\"空对象模式\",{\"1\":{\"106\":1}}],[\"空间复用\",{\"1\":{\"74\":1}}],[\"空间足够时\",{\"1\":{\"70\":1}}],[\"空间换时间\",{\"1\":{\"69\":1}}],[\"观察者模式\",{\"1\":{\"106\":1}}],[\"备忘录模式\",{\"1\":{\"106\":1}}],[\"解释器模式\",{\"1\":{\"106\":1}}],[\"解决c++的函数名称重载问题\",{\"1\":{\"79\":1}}],[\"责任链模式\",{\"1\":{\"106\":1}}],[\"享元模式\",{\"1\":{\"105\":1}}],[\"外观模式\",{\"1\":{\"105\":1}}],[\"装饰器模式\",{\"1\":{\"105\":1}}],[\"装入并绑定指定的动态库\",{\"1\":{\"81\":1}}],[\"桥接模式\",{\"1\":{\"105\":1}}],[\"适配器模式\",{\"1\":{\"105\":1}}],[\"结构型\",{\"1\":{\"105\":1}}],[\"结构型模式\",{\"0\":{\"105\":1}}],[\"建造者模式\",{\"1\":{\"104\":1}}],[\"建议将该目录与源代码目录分开\",{\"1\":{\"45\":1}}],[\"单独编译成目标文件\",{\"1\":{\"110\":1}}],[\"单一职责\",{\"1\":{\"107\":1}}],[\"单一职责原则\",{\"0\":{\"101\":1}}],[\"单例模式\",{\"1\":{\"104\":1}}],[\"抽象工厂模式\",{\"1\":{\"104\":1}}],[\"工厂模式\",{\"1\":{\"104\":1}}],[\"另外一种定义\",{\"1\":{\"101\":1}}],[\"聚合的方式\",{\"1\":{\"100\":1}}],[\"合成复用原则是指\",{\"1\":{\"100\":1}}],[\"合成复用原则\",{\"0\":{\"100\":1}}],[\"合并分支\",{\"1\":{\"32\":1}}],[\"合并分支代码\",{\"1\":{\"16\":1}}],[\"又称最少知道原则\",{\"0\":{\"99\":1}}],[\"迪米特法则\",{\"0\":{\"99\":1}}],[\"降低耦合\",{\"1\":{\"98\":1}}],[\"降低类之间的耦合度\",{\"1\":{\"98\":1}}],[\"便于升级和维护的软件设计思想\",{\"1\":{\"98\":1}}],[\"接口隔离\",{\"1\":{\"107\":1}}],[\"接口隔离原则\",{\"0\":{\"98\":1}}],[\"接下来\",{\"1\":{\"41\":1,\"46\":1}}],[\"针对接口编程\",{\"1\":{\"97\":1}}],[\"针对这个瓶颈进行代码层面\",{\"1\":{\"69\":1}}],[\"依赖于抽象而不依赖于具体\",{\"1\":{\"97\":1}}],[\"依赖倒转原则\",{\"0\":{\"97\":1}}],[\"依赖项\",{\"0\":{\"42\":1}}],[\"依赖项和构建选项\",{\"1\":{\"39\":1}}],[\"基类才能真正被复用\",{\"1\":{\"96\":1}}],[\"基本上\",{\"1\":{\"67\":1}}],[\"且软件单位的功能不受到影响时\",{\"1\":{\"96\":1}}],[\"只有动态库的引用加入到目标文件中\",{\"1\":{\"109\":1}}],[\"只有当派生类可以替换掉基类\",{\"1\":{\"96\":1}}],[\"只能通过迭代器遍历元素\",{\"1\":{\"71\":1}}],[\"只能通过\",{\"1\":{\"1\":1}}],[\"子类一定可以出现\",{\"1\":{\"96\":1}}],[\"子项目\",{\"1\":{\"56\":1}}],[\"任何基类可以出现的地方\",{\"1\":{\"96\":1}}],[\"里氏代换原则是对开闭原则的补充\",{\"1\":{\"96\":1}}],[\"里氏代换原则是面向对象设计的基本原则之一\",{\"1\":{\"96\":1}}],[\"里氏代换原则中说\",{\"1\":{\"96\":1}}],[\"里氏代换原则\",{\"0\":{\"96\":1}}],[\"后面的具体设计中我们会提到这点\",{\"1\":{\"95\":1}}],[\"后进先出\",{\"1\":{\"66\":1}}],[\"想要达到这样的效果\",{\"1\":{\"95\":1}}],[\"易于维护和升级\",{\"1\":{\"95\":1}}],[\"简言之\",{\"1\":{\"95\":1}}],[\"简单的功能函数可以使用内联\",{\"1\":{\"70\":1}}],[\"开闭原则的意思是\",{\"1\":{\"95\":1}}],[\"开闭原则\",{\"0\":{\"95\":1}}],[\"优先使用对象组合而不是继承\",{\"1\":{\"93\":1}}],[\"优化算法或者架构\",{\"1\":{\"70\":1}}],[\"优化代码结构\",{\"1\":{\"70\":1}}],[\"优化线程的使用\",{\"1\":{\"70\":1}}],[\"优化线程或进程的同步方式\",{\"1\":{\"70\":1}}],[\"优化堆内存的使用\",{\"1\":{\"70\":1}}],[\"优化判断条件\",{\"1\":{\"70\":1}}],[\"他们所提出的设计模式主要是基于以下的面向对象设计原则\",{\"1\":{\"93\":1}}],[\"四人帮\",{\"1\":{\"93\":1}}],[\"四人合著出版了一本名为\",{\"1\":{\"93\":1}}],[\"四位作者合称\",{\"1\":{\"93\":1}}],[\"年\",{\"1\":{\"93\":1}}],[\"设计模式分类\",{\"0\":{\"102\":1}}],[\"设计模式七大原则\",{\"0\":{\"94\":1}}],[\"设计模式简介\",{\"0\":{\"93\":1}}],[\"设计模式\",{\"0\":{\"92\":1},\"1\":{\"93\":2}}],[\"设置交叉编译器的根路径\",{\"0\":{\"51\":1}}],[\"设置交叉编译工具链\",{\"0\":{\"50\":1}}],[\"设置代理\",{\"0\":{\"36\":1}}],[\"类型等信息\",{\"1\":{\"91\":1}}],[\"符号名称\",{\"1\":{\"91\":1}}],[\"符号开头的文件的改动\",{\"1\":{\"15\":1}}],[\"|\",{\"1\":{\"90\":1}}],[\"真的版本号是在动态库文件内的soname里面\",{\"1\":{\"90\":1}}],[\"搜索路径为$\",{\"1\":{\"88\":1}}],[\"输出文件名为mylib\",{\"1\":{\"87\":1}}],[\"应该仅有一个引起它变化的原因\",{\"1\":{\"101\":1}}],[\"应该使用其他更安全和可靠的方法来指定动态库的路径\",{\"1\":{\"86\":1}}],[\"应用程序级动态库存放在\",{\"1\":{\"84\":1}}],[\"除非确实需要在非标准路径下搜索动态库文件\",{\"1\":{\"86\":1}}],[\"发布号\",{\"1\":{\"84\":1}}],[\"发现\",{\"1\":{\"35\":1}}],[\"次版本号\",{\"1\":{\"84\":1}}],[\"主版本号\",{\"1\":{\"84\":1}}],[\"主要有两个作用\",{\"1\":{\"79\":1}}],[\"系统级动态库存放在\",{\"1\":{\"84\":1}}],[\"系统根目录设置为\",{\"1\":{\"51\":1}}],[\"否则表示失败\",{\"1\":{\"83\":2}}],[\"否则会出现代码可读性差\",{\"1\":{\"69\":1}}],[\"返回非0表示成功\",{\"1\":{\"83\":1}}],[\"返回0表示成功\",{\"1\":{\"83\":1}}],[\"返回一个指针\",{\"1\":{\"83\":2}}],[\"返回一个句柄\",{\"1\":{\"83\":2}}],[\"链接动态库\",{\"0\":{\"82\":1}}],[\"链接器选项\",{\"1\":{\"43\":1}}],[\"更加高效\",{\"1\":{\"81\":1}}],[\"更加灵活\",{\"1\":{\"81\":1}}],[\"更改配置文件\",{\"1\":{\"3\":1}}],[\"更改服务器绑定地址\",{\"0\":{\"3\":1}}],[\"动态链接库版本不兼容等问题\",{\"1\":{\"91\":1}}],[\"动态地连接其它额外需要的动态扩展库或插件\",{\"1\":{\"81\":1}}],[\"动态加载是在运行时进行的\",{\"1\":{\"81\":1}}],[\"动态加载和编译时链接动态库的区别主要在于时机和方式的不同\",{\"1\":{\"81\":1}}],[\"动态加载和编译时链接\",{\"0\":{\"81\":1}}],[\"动态库可以在不重新编译程序的情况下进行更新\",{\"1\":{\"109\":1}}],[\"动态库在运行时\",{\"1\":{\"109\":1}}],[\"动态库文件扩展名为\",{\"1\":{\"109\":1}}],[\"动态库文件的扩展名应该为\",{\"1\":{\"84\":1}}],[\"动态库文件的版本号应该采用\",{\"1\":{\"84\":1}}],[\"动态库文件的前缀应该为\",{\"1\":{\"84\":1}}],[\"动态库文件的命名应该遵循一定的规则\",{\"1\":{\"84\":1}}],[\"动态库\",{\"1\":{\"109\":1}}],[\"动态库路径规范\",{\"0\":{\"84\":1}}],[\"动态库卸载失败\",{\"1\":{\"83\":2}}],[\"动态库加载失败\",{\"1\":{\"83\":2}}],[\"动态库通常采用共享对象文件\",{\"1\":{\"77\":1}}],[\"动态库是一种可以在程序运行时被动态加载的共享库\",{\"1\":{\"77\":1}}],[\"动态库开发\",{\"0\":{\"77\":1}}],[\"避免受到c++异常处理机制的影响\",{\"1\":{\"79\":1}}],[\"避免c++异常处理机制的影响\",{\"1\":{\"79\":1}}],[\"异常处理机制是通过一系列特殊的函数和数据结构来实现的\",{\"1\":{\"79\":1}}],[\"之类的名字\",{\"1\":{\"79\":1}}],[\"之后\",{\"1\":{\"14\":1}}],[\"同一个函数名可以对应多个不同的函数\",{\"1\":{\"79\":1}}],[\"同时在析构函数中使用delete\",{\"1\":{\"74\":1}}],[\"关键字来标识\",{\"1\":{\"78\":1}}],[\"关于c++就业方向\",{\"0\":{\"76\":1}}],[\"关于\",{\"0\":{\"0\":1,\"67\":1}}],[\"修饰符\",{\"1\":{\"79\":1}}],[\"修饰符来标识\",{\"1\":{\"78\":1}}],[\"修改和被删除的文件\",{\"1\":{\"15\":3}}],[\"修改写同步模式\",{\"0\":{\"12\":1}}],[\"编写源文件\",{\"1\":{\"110\":1}}],[\"编写要导出的函数时\",{\"1\":{\"78\":1}}],[\"编译链接时指定动态库路径\",{\"0\":{\"85\":1}}],[\"编译源文件\",{\"0\":{\"80\":1}}],[\"编译器将在\",{\"1\":{\"85\":1,\"86\":1}}],[\"编译器会产生像\",{\"1\":{\"79\":1}}],[\"编译器的路径\",{\"1\":{\"54\":1}}],[\"编译器设置为\",{\"1\":{\"50\":1}}],[\"编译器和\",{\"1\":{\"50\":1}}],[\"导致程序出现异常而无法正常运行\",{\"1\":{\"79\":1}}],[\"导致频繁的提交以及磁盘\",{\"1\":{\"9\":1}}],[\"导出函数获取失败\",{\"1\":{\"83\":2}}],[\"导出函数\",{\"0\":{\"78\":1}}],[\"帮助了解如何编写高质量的动态库\",{\"1\":{\"77\":1}}],[\"本文将介绍动态库的开发方法以及注意事项\",{\"1\":{\"77\":1}}],[\"本地也想删除\",{\"0\":{\"21\":1}}],[\"本地删除了分支\",{\"0\":{\"20\":1}}],[\"本地没有\",{\"0\":{\"19\":1}}],[\"本地有新分支\",{\"0\":{\"18\":1}}],[\"未必能很快地切换到另一方向\",{\"1\":{\"76\":1}}],[\"未初始化的数据从数据段的末尾开始\",{\"1\":{\"64\":1}}],[\"未初始化的数据段通常称为bss段\",{\"1\":{\"64\":1}}],[\"未初始化的数据段\",{\"0\":{\"64\":1}}],[\"游戏开发等许多领域\",{\"1\":{\"76\":1}}],[\"图像处理\",{\"1\":{\"76\":1}}],[\"qt开发\",{\"1\":{\"76\":1}}],[\"音视频开发\",{\"1\":{\"76\":1}}],[\"嵌入式开发\",{\"1\":{\"76\":1}}],[\"高性能计算\",{\"1\":{\"76\":1}}],[\"量化交易\",{\"1\":{\"76\":1}}],[\"涵盖数据库\",{\"1\":{\"76\":1}}],[\"虽然c++的应用方向非常广泛\",{\"1\":{\"76\":1}}],[\"就一个类而言\",{\"1\":{\"101\":1}}],[\"就是设计过程中可以反复使用的\",{\"1\":{\"93\":1}}],[\"就可能会受到c++异常处理机制的影响\",{\"1\":{\"79\":1}}],[\"就可以使用交叉编译工具链来生成针对嵌入式设备的代码\",{\"1\":{\"52\":1}}],[\"就可以运行生成的可执行文件了\",{\"1\":{\"48\":1}}],[\"就可以构建项目了\",{\"1\":{\"47\":1}}],[\"就可以进行项目配置和构建了\",{\"1\":{\"44\":1}}],[\"就可以进行远程访问了\",{\"1\":{\"5\":1}}],[\"就会导致符号表中出现多个同名函数\",{\"1\":{\"79\":1}}],[\"就业方向是很不确定的\",{\"1\":{\"76\":1}}],[\"相关技巧\",{\"0\":{\"89\":1}}],[\"相对于java和javascript来说\",{\"1\":{\"76\":1}}],[\"相当于all\",{\"1\":{\"15\":1}}],[\"+\",{\"1\":{\"75\":2,\"78\":2,\"79\":1}}],[\"++i\",{\"1\":{\"75\":2}}],[\"++it\",{\"1\":{\"71\":1}}],[\"++\",{\"1\":{\"72\":2}}],[\"++n\",{\"1\":{\"71\":1}}],[\"源码\",{\"0\":{\"75\":1}}],[\"总的来说\",{\"1\":{\"74\":1}}],[\"总结\",{\"1\":{\"15\":1}}],[\"指针交换等\",{\"1\":{\"74\":1}}],[\"指定库的名称\",{\"0\":{\"112\":1}}],[\"指定动态库的输出路径和名称\",{\"1\":{\"87\":1}}],[\"指定\",{\"1\":{\"54\":1}}],[\"指定安装目录的路径\",{\"1\":{\"54\":1}}],[\"指定构建类型\",{\"1\":{\"54\":1}}],[\"迭代器模式\",{\"1\":{\"106\":1}}],[\"迭代器\",{\"1\":{\"74\":1}}],[\"元素插入和删除\",{\"1\":{\"74\":1}}],[\"元素访问\",{\"1\":{\"74\":1}}],[\"扩容时会重新分配一块更大的内存空间\",{\"1\":{\"74\":1}}],[\"运行时需要加载动态库\",{\"1\":{\"109\":1}}],[\"运行时不需要加载静态库\",{\"1\":{\"109\":1}}],[\"运行项目\",{\"0\":{\"48\":1}}],[\"运算符来释放内存\",{\"1\":{\"74\":1,\"75\":1}}],[\"具有自动扩容的功能\",{\"1\":{\"74\":2}}],[\"具体内容\",{\"1\":{\"97\":1}}],[\"具体规则如下\",{\"1\":{\"84\":1}}],[\"具体实现中使用new运算符来分配内存\",{\"1\":{\"75\":1}}],[\"具体实现时\",{\"1\":{\"72\":1}}],[\"具体实现上\",{\"1\":{\"72\":1}}],[\"具体安装步骤如下\",{\"1\":{\"14\":1}}],[\"赋值操作等中使用原子操作来更新引用计数\",{\"1\":{\"72\":1}}],[\"析构函数\",{\"1\":{\"72\":1}}],[\"~t\",{\"1\":{\"75\":2}}],[\"~vector\",{\"1\":{\"75\":1}}],[\"~sharedptr\",{\"1\":{\"72\":1}}],[\"~list\",{\"1\":{\"71\":1}}],[\"使得系统功能模块相对独立\",{\"1\":{\"99\":1}}],[\"使得它可以适用于不同类型的动态内存\",{\"1\":{\"72\":1}}],[\"使用ar命令打包多个目标文件成一个库文件\",{\"1\":{\"110\":1}}],[\"使用多个隔离的接口\",{\"1\":{\"98\":1}}],[\"使用find\",{\"1\":{\"88\":1}}],[\"使用cmake构建静态库\",{\"0\":{\"111\":1}}],[\"使用cmake构建动态库的步骤如下\",{\"1\":{\"87\":1}}],[\"使用cmake构建动态库\",{\"0\":{\"87\":1}}],[\"使用cmake链接动态库\",{\"0\":{\"88\":1}}],[\"使用环境变量ld\",{\"1\":{\"85\":1}}],[\"使用编译器的\",{\"1\":{\"85\":1}}],[\"使用动态库\",{\"0\":{\"83\":1}}],[\"使用了c++的异常处理机制\",{\"1\":{\"79\":1}}],[\"使用extern\",{\"1\":{\"79\":3}}],[\"使用上述实现方式\",{\"1\":{\"72\":1}}],[\"使用单独的线程去异步处理耗时业务\",{\"1\":{\"70\":1}}],[\"使用如malloc之类的函数\",{\"1\":{\"65\":1}}],[\"使用这些变量可以方便地定制构建过程\",{\"1\":{\"54\":1}}],[\"使用带有调试符号构建库或可执行文件\",{\"1\":{\"54\":1}}],[\"使用变量可以使\",{\"1\":{\"54\":1}}],[\"使用变量\",{\"0\":{\"54\":1}}],[\"使用包管理器进行安装\",{\"1\":{\"26\":1}}],[\"使用homebrew进行安装\",{\"1\":{\"25\":1}}],[\"使用最新的\",{\"1\":{\"14\":1}}],[\"使用\",{\"0\":{\"55\":1,\"56\":1,\"57\":1,\"79\":1,\"86\":1},\"1\":{\"14\":2,\"50\":1,\"51\":1,\"52\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"86\":2}}],[\"使用方法为\",{\"1\":{\"11\":1}}],[\"使用内存模式写数据速度很快\",{\"1\":{\"11\":1}}],[\"使用内存模式\",{\"0\":{\"11\":1}}],[\"使用执行准备\",{\"0\":{\"10\":1}}],[\"使用事务+执行准备+内存模式\",{\"1\":{\"13\":1}}],[\"使用事务+执行准备\",{\"1\":{\"13\":1}}],[\"使用事务机制\",{\"1\":{\"9\":1}}],[\"使用事务\",{\"0\":{\"9\":1},\"1\":{\"13\":1}}],[\"控制块包含了引用计数和指向动态内存的指针\",{\"1\":{\"72\":1}}],[\"则意味着没有任何shared\",{\"1\":{\"72\":1}}],[\"该书首次提到了软件开发中设计模式的概念\",{\"1\":{\"93\":1}}],[\"该计数初始化为1\",{\"1\":{\"72\":1}}],[\"该段中的数据由内核初始化为\",{\"1\":{\"64\":1}}],[\"该段又可以分为初始化只读区和初始化读写区\",{\"1\":{\"63\":1}}],[\"它强调降低依赖\",{\"1\":{\"98\":1}}],[\"它还有另外一个意思是\",{\"1\":{\"98\":1}}],[\"它用于查看一个二进制可执行文件或共享库所依赖的动态链接库\",{\"1\":{\"91\":1}}],[\"它会将指定的路径添加到可执行程序的运行时搜索路径中\",{\"1\":{\"86\":1}}],[\"它会初始化一个引用计数\",{\"1\":{\"72\":1}}],[\"它需要使用特定的系统调用或语言\",{\"1\":{\"81\":1}}],[\"它包含了一组函数和数据\",{\"1\":{\"77\":1}}],[\"它们分属不同的行业与技术领域\",{\"1\":{\"76\":1}}],[\"它们共享同一个引用计数\",{\"1\":{\"72\":1}}],[\"它的实现原理可以分为以下几个方面\",{\"1\":{\"74\":1}}],[\"它的引用计数会减少1\",{\"1\":{\"72\":1}}],[\"它的引用计数会增加1\",{\"1\":{\"72\":1}}],[\"它是通过引用计数来管理动态内存的\",{\"1\":{\"72\":1}}],[\"它是一个lifo\",{\"1\":{\"66\":1}}],[\"7\",{\"1\":{\"71\":1}}],[\"5\",{\"1\":{\"71\":1}}],[\"插入到尾节点之前\",{\"1\":{\"71\":1}}],[\"插入到头节点之后\",{\"1\":{\"71\":1}}],[\"插入和删除\",{\"1\":{\"71\":1}}],[\"释放所有节点\",{\"1\":{\"71\":1}}],[\"统计元素个数\",{\"1\":{\"71\":1}}],[\"遍历链表\",{\"1\":{\"71\":2}}],[\"函数的名称通常会被记录在符号表中\",{\"1\":{\"79\":1}}],[\"函数\",{\"1\":{\"71\":8}}],[\"函数调用所需要维护的信息等\",{\"1\":{\"66\":1}}],[\"实现开闭原则的关键步骤就是抽象化\",{\"1\":{\"96\":1}}],[\"实现一个热插拔的效果\",{\"1\":{\"95\":1}}],[\"实现list的赋值运算符\",{\"1\":{\"71\":1}}],[\"实现list的成员函数\",{\"1\":{\"71\":1}}],[\"实际上没有太多的交集与相同点\",{\"1\":{\"76\":1}}],[\"实际上c++标准库中的vector实现相对复杂\",{\"1\":{\"75\":1}}],[\"实际项目中\",{\"1\":{\"56\":1}}],[\"实际装完用\",{\"1\":{\"14\":1}}],[\"即指向null\",{\"1\":{\"71\":1}}],[\"即global\",{\"1\":{\"63\":1}}],[\"头节点和尾节点都是空节点\",{\"1\":{\"71\":1}}],[\"头节点指针和尾节点指针\",{\"1\":{\"71\":1}}],[\"前驱指针和后继指针赋初值\",{\"1\":{\"71\":1}}],[\"前驱指针和后继指针\",{\"1\":{\"71\":1}}],[\"前提是分支的commit历史不重要\",{\"1\":{\"16\":1}}],[\"定义list类\",{\"1\":{\"71\":1}}],[\"定义迭代器类\",{\"1\":{\"71\":1}}],[\"定义节点结构体\",{\"1\":{\"71\":1}}],[\"定义的全局字符串和main外\",{\"1\":{\"63\":1}}],[\"会重新分配一块更大的内存空间\",{\"1\":{\"71\":1}}],[\"会提交被删除的文件\",{\"1\":{\"15\":1}}],[\"随机访问\",{\"1\":{\"71\":1}}],[\"存储结构\",{\"1\":{\"71\":1}}],[\"存储在初始化的只读区\",{\"1\":{\"63\":1}}],[\"从封装变化角度对模式分类\",{\"0\":{\"107\":1}}],[\"从目的对模式分类\",{\"0\":{\"103\":1}}],[\"从而应对需求变化为多个交互的对象带来的冲击\",{\"1\":{\"106\":1}}],[\"从而应对需求变化为对象的结构带来的冲击\",{\"1\":{\"105\":1}}],[\"从而应对需求变化为对象创建时具体类型实现引来的冲击\",{\"1\":{\"104\":1}}],[\"从而使动态库更加稳定和可靠\",{\"1\":{\"79\":1}}],[\"从而避免函数名称重载问题\",{\"1\":{\"79\":1}}],[\"从而导致链接错误\",{\"1\":{\"79\":1}}],[\"从而降低了c++工程师的职业流动性\",{\"1\":{\"76\":1}}],[\"从而保证了线程安全\",{\"1\":{\"72\":1}}],[\"从设计层面进行性能的优化\",{\"1\":{\"70\":1}}],[\"从远程仓库克隆一个项目\",{\"1\":{\"30\":1}}],[\"耗时的业务代码不要放在ui线程中执行\",{\"1\":{\"70\":1}}],[\"界面开发中\",{\"1\":{\"70\":1}}],[\"谨慎使用轮循或者sleep函数\",{\"1\":{\"70\":1}}],[\"线程使用频繁的可以考虑线程池\",{\"1\":{\"70\":1}}],[\"节省系统资源与切换造成的性能损耗\",{\"1\":{\"70\":1}}],[\"节点下的\",{\"1\":{\"3\":1}}],[\"能应用层同步的就不用内核对象同步\",{\"1\":{\"70\":1}}],[\"能用原子操作的就不用锁\",{\"1\":{\"70\":1}}],[\"多用组合\",{\"1\":{\"70\":1}}],[\"少用继承\",{\"1\":{\"70\":1}}],[\"尽量使用合成\",{\"1\":{\"100\":1}}],[\"尽量使用事件通知\",{\"1\":{\"70\":1}}],[\"尽量使用c++11的右值语义\",{\"1\":{\"70\":1}}],[\"尽量减少继承层级\",{\"1\":{\"70\":1}}],[\"尽量减少大内存对象的构造与析构\",{\"1\":{\"70\":1}}],[\"等待后续继续使用\",{\"1\":{\"70\":1}}],[\"考虑缓存暂时不用的对象\",{\"1\":{\"70\":1}}],[\"缓存在内存中\",{\"1\":{\"70\":1}}],[\"常用优化方法\",{\"0\":{\"70\":1}}],[\"常用的加不同参数的命令有以下几个\",{\"1\":{\"15\":1}}],[\"架构层面等多方面的优化\",{\"1\":{\"69\":1}}],[\"算法层面\",{\"1\":{\"69\":1}}],[\"寻找出程序的性能瓶颈\",{\"1\":{\"69\":1}}],[\"良好的代码风格和代码规范能有效的避免性能问题的出现\",{\"1\":{\"69\":1}}],[\"大幅度的提升程序性能需要借助程序分析器\",{\"1\":{\"69\":1}}],[\"大部分的性能优化其实都是在做时间和空间的权衡\",{\"1\":{\"69\":1}}],[\"大约\",{\"1\":{\"69\":3}}],[\"过滤器模式\",{\"1\":{\"105\":1}}],[\"过度抽象等问题\",{\"1\":{\"69\":1}}],[\"过程中是可以在安装界面设置\",{\"1\":{\"2\":1}}],[\"再考虑性能优化的事\",{\"1\":{\"69\":1}}],[\"再执行\",{\"1\":{\"11\":1}}],[\"先完成程序功能\",{\"1\":{\"69\":1}}],[\"一个对象应该只包含单一的职责\",{\"1\":{\"101\":1}}],[\"一个实体应当尽量少地与其他实体之间发生相互作用\",{\"1\":{\"99\":1}}],[\"一名在某一方向\",{\"1\":{\"76\":1}}],[\"一些简单的优化也能显著提高程序性能\",{\"1\":{\"69\":1}}],[\"一般就是上一层目录\",{\"1\":{\"46\":1}}],[\"说得是\",{\"1\":{\"69\":1}}],[\"说它在自由存储区上也正确\",{\"1\":{\"67\":1}}],[\"说它在堆上也对\",{\"1\":{\"67\":1}}],[\"书中效率部分第一条就是80\",{\"1\":{\"69\":1}}],[\"原型模式\",{\"1\":{\"104\":1}}],[\"原理\",{\"0\":{\"74\":1}}],[\"原则\",{\"0\":{\"69\":1}}],[\"原来的commit历史记录不合并过来\",{\"1\":{\"16\":1}}],[\"原来未优化的代码为直接循环执行insert语句\",{\"1\":{\"8\":1}}],[\"性能优化\",{\"0\":{\"68\":1}}],[\"改用其他内存来实现自由存储\",{\"1\":{\"67\":1}}],[\"改为\",{\"1\":{\"3\":1}}],[\"所有的c++编译器默认使用堆来实现自由存储\",{\"1\":{\"67\":1}}],[\"所以里氏代换原则是对实现抽象化的具体步骤的规范\",{\"1\":{\"96\":1}}],[\"所以code\",{\"1\":{\"69\":1}}],[\"所以不会被提交至暂存区\",{\"1\":{\"15\":1}}],[\"所以先添加密码\",{\"1\":{\"2\":1}}],[\"所以特意写一篇文章记录一下配置过程\",{\"1\":{\"1\":1}}],[\"自动驾驶\",{\"1\":{\"76\":1}}],[\"自由存储区是c++中通过new和delete动态分配和释放对象的抽象概念\",{\"1\":{\"67\":1}}],[\"自定义构建规则\",{\"0\":{\"58\":1}}],[\"程序的自由存储区\",{\"0\":{\"67\":1}}],[\"程序的典型内存由文本段\",{\"1\":{\"60\":1}}],[\"根据操作系统的不同有所不同\",{\"1\":{\"66\":1}}],[\"当一个shared\",{\"1\":{\"72\":3}}],[\"当一个函数运行结束后\",{\"1\":{\"66\":1}}],[\"当前目录外的文件\",{\"1\":{\"15\":1}}],[\"每个方向的c++岗位都不算多\",{\"1\":{\"76\":1}}],[\"每个shared\",{\"1\":{\"72\":1}}],[\"每个模块相当于一个子项目\",{\"1\":{\"56\":1}}],[\"每次插入一个元素都会分配一块新的内存空间\",{\"1\":{\"71\":1}}],[\"每当一个函数声明一个新的变量它将被压入栈中\",{\"1\":{\"66\":1}}],[\"栈溢出发生在所有栈区的内存都被分配完\",{\"1\":{\"66\":1}}],[\"栈存放局部变量的值\",{\"1\":{\"66\":1}}],[\"栈\",{\"0\":{\"66\":1}}],[\"与vector相比\",{\"1\":{\"71\":1}}],[\"与栈区不同\",{\"1\":{\"65\":1}}],[\"与node\",{\"1\":{\"14\":1}}],[\"你必须显式地申请\",{\"1\":{\"65\":1}}],[\"堆区除了物理内存的大小通常没有大小的限制\",{\"1\":{\"65\":1}}],[\"堆是一个可以动态使用的大内存\",{\"1\":{\"65\":1}}],[\"堆\",{\"0\":{\"65\":1}}],[\"堆和栈4部分组成\",{\"1\":{\"60\":1}}],[\"段中\",{\"1\":{\"64\":2}}],[\"声明为\",{\"1\":{\"64\":2}}],[\"字符指针变量string存储在初始化的读写区\",{\"1\":{\"63\":1}}],[\"都会存放在初始化的读写区中\",{\"1\":{\"63\":1}}],[\"因为只需要修改相邻节点的指针\",{\"1\":{\"71\":1}}],[\"因为需要移动其他元素\",{\"1\":{\"71\":1}}],[\"因为变量的值可以在运行时更改\",{\"1\":{\"63\":1}}],[\"因此建议尽量避免使用它\",{\"1\":{\"86\":1}}],[\"因此建议尽量不要使用它来指定动态库的路径\",{\"1\":{\"85\":1}}],[\"因此在使用c++动态库时\",{\"1\":{\"79\":1}}],[\"因此我们可以在构造函数和析构函数中直接使用new和delete来分配和释放std\",{\"1\":{\"72\":1}}],[\"因此\",{\"1\":{\"69\":1,\"76\":1}}],[\"因此对于频繁执行的程序\",{\"1\":{\"61\":1}}],[\"因此需要一条额外的commit命令\",{\"1\":{\"16\":1}}],[\"初始化数据段\",{\"1\":{\"63\":1}}],[\"初始化仓库\",{\"0\":{\"29\":1}}],[\"已初始化数据段\",{\"0\":{\"63\":1}}],[\"已经过时\",{\"1\":{\"1\":1}}],[\"静态库会增加程序的体积\",{\"1\":{\"109\":1}}],[\"静态库在编译和链接时\",{\"1\":{\"109\":1}}],[\"静态库文件扩展名为\",{\"1\":{\"109\":1}}],[\"静态库的对象文件直接加入到目标文件中\",{\"1\":{\"109\":1}}],[\"静态库\",{\"1\":{\"109\":1}}],[\"静态库与动态库的区别\",{\"0\":{\"109\":1}}],[\"静态库开发方法\",{\"0\":{\"110\":1}}],[\"静态库开发\",{\"0\":{\"108\":1}}],[\"静态地预先连接常用的基本库\",{\"1\":{\"81\":1}}],[\"静态链接是在编译时进行的\",{\"1\":{\"81\":1}}],[\"静态存储区\",{\"0\":{\"62\":1}}],[\"静态数据段\",{\"0\":{\"62\":1}}],[\"全拼\",{\"1\":{\"93\":1}}],[\"全局\",{\"0\":{\"62\":2}}],[\"全部取回本地\",{\"1\":{\"19\":1}}],[\"内存分配策略\",{\"1\":{\"74\":1}}],[\"内存分配\",{\"1\":{\"71\":1,\"74\":1}}],[\"内存仍然被占用\",{\"1\":{\"65\":1}}],[\"内存中只需要一个副本\",{\"1\":{\"61\":1}}],[\"内存模式相比普通模式\",{\"1\":{\"11\":1}}],[\"内存模式是将数据库直接创建到内存中\",{\"1\":{\"11\":1}}],[\"也称为共享对象\",{\"1\":{\"91\":1}}],[\"也称为代码段或简称为文本\",{\"1\":{\"61\":1}}],[\"也即是缺省的全局运算符new和delete也许会按照malloc和free的方式来被实现\",{\"1\":{\"67\":1}}],[\"也可以根据需要启用特定的警告选项\",{\"1\":{\"43\":1}}],[\"也可以用于构建其他语言的源代码\",{\"1\":{\"38\":1}}],[\"也可以像\",{\"1\":{\"4\":1}}],[\"也可使用\",{\"1\":{\"14\":1}}],[\"代表\",{\"1\":{\"64\":1}}],[\"代码如下\",{\"1\":{\"79\":1}}],[\"代码区\",{\"0\":{\"61\":1}}],[\"代码段\",{\"0\":{\"61\":1}}],[\"代理模式\",{\"1\":{\"105\":1}}],[\"代理\",{\"1\":{\"36\":1}}],[\"获取文件夹名称\",{\"0\":{\"59\":1}}],[\">data\",{\"1\":{\"71\":1}}],[\">prev\",{\"1\":{\"71\":8}}],[\">next\",{\"1\":{\"71\":9}}],[\">\",{\"1\":{\"58\":1,\"72\":1,\"75\":1}}],[\"日期等信息\",{\"1\":{\"57\":1}}],[\"由此可见\",{\"1\":{\"98\":1}}],[\"由\",{\"1\":{\"93\":1}}],[\"由于文件名很容易被改动\",{\"1\":{\"90\":1}}],[\"由于std\",{\"1\":{\"72\":1}}],[\"由于构建较少的优化库或可执行文件\",{\"1\":{\"54\":1}}],[\"由编译器自动分配释放\",{\"1\":{\"66\":1}}],[\"由符号开始的块\",{\"1\":{\"64\":1}}],[\"由原来的\",{\"1\":{\"3\":1}}],[\"提高vector的效率\",{\"1\":{\"74\":1}}],[\"提高界面响应速度\",{\"1\":{\"70\":1}}],[\"提供了许多内置变量来自定义构建过程\",{\"1\":{\"54\":1}}],[\"提交更改\",{\"1\":{\"31\":1}}],[\"提交代码时需要\",{\"1\":{\"27\":1}}],[\"提交合并后的代码\",{\"1\":{\"16\":1}}],[\"$ld\",{\"1\":{\"85\":1}}],[\"$\",{\"1\":{\"54\":2,\"55\":2,\"57\":2,\"59\":1,\"87\":1,\"88\":2}}],[\"经常重构\",{\"1\":{\"70\":1}}],[\"经常出现超时\",{\"1\":{\"35\":1}}],[\"经验总结\",{\"0\":{\"53\":1}}],[\"选项表示生成与位置无关代码\",{\"1\":{\"80\":1}}],[\"选项指定交叉编译工具链的路径\",{\"1\":{\"52\":1}}],[\"选项的含义是\",{\"1\":{\"16\":1}}],[\"传参数指定交叉编译工具链的\",{\"0\":{\"52\":1}}],[\"处理器设置为\",{\"1\":{\"50\":1}}],[\"支持交叉编译\",{\"1\":{\"49\":1}}],[\"交叉编译\",{\"0\":{\"49\":1}}],[\"参数\",{\"1\":{\"47\":1}}],[\"参数传递给\",{\"1\":{\"46\":1}}],[\"构建完成后\",{\"1\":{\"48\":1}}],[\"构建工具来构建项目\",{\"1\":{\"47\":1}}],[\"构建项目\",{\"0\":{\"47\":1}}],[\"构建选项\",{\"0\":{\"43\":1}}],[\"whole\",{\"1\":{\"116\":2}}],[\"while\",{\"1\":{\"71\":1}}],[\"wl\",{\"1\":{\"86\":2,\"116\":2}}],[\"world\",{\"1\":{\"63\":3}}],[\"wall\",{\"1\":{\"43\":1}}],[\"with\",{\"1\":{\"2\":1,\"5\":1}}],[\"windows\",{\"0\":{\"14\":1},\"1\":{\"2\":1,\"3\":1,\"14\":3,\"109\":1}}],[\"目标平台等\",{\"1\":{\"43\":1,\"46\":1}}],[\"目前开发前端基本上离不开\",{\"1\":{\"14\":1}}],[\"库\",{\"1\":{\"42\":1,\"55\":1}}],[\"项目配置和构建\",{\"0\":{\"44\":1}}],[\"项目名称和源代码\",{\"0\":{\"41\":1}}],[\"项目不同分支之间代码的合并是常用的操作\",{\"1\":{\"16\":1}}],[\"例如缺少某些动态链接库\",{\"1\":{\"91\":1}}],[\"例如libmylib\",{\"1\":{\"84\":1}}],[\"例如游戏开发\",{\"1\":{\"76\":1}}],[\"例如reserve\",{\"1\":{\"75\":1}}],[\"例如预分配内存空间\",{\"1\":{\"74\":1}}],[\"例如全局变量做的对象池\",{\"1\":{\"67\":1}}],[\"例如构建类型\",{\"1\":{\"46\":1}}],[\"例如编译器选项\",{\"1\":{\"43\":1}}],[\"例如\",{\"1\":{\"40\":1,\"41\":1,\"42\":1,\"43\":2,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"50\":2,\"51\":1,\"52\":1,\"54\":2,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"64\":1,\"78\":1,\"79\":1,\"85\":2,\"86\":1}}],[\"例如在ubuntu上\",{\"1\":{\"26\":1}}],[\"通过类继承或者对象组合来划分类与对象间的职责\",{\"1\":{\"106\":1}}],[\"通过类继承或者对象组合获得更灵活的结构\",{\"1\":{\"105\":1}}],[\"通过指针加上下标的偏移量来访问指定元素的内存地址\",{\"1\":{\"74\":1}}],[\"通过引用计数来管理动态内存的生命周期\",{\"1\":{\"72\":1}}],[\"通过new来申请的内存区域可称为自由存储区\",{\"1\":{\"67\":1}}],[\"通过输入\",{\"1\":{\"14\":1}}],[\"通常会灵活结合这两种方式\",{\"1\":{\"81\":1}}],[\"通常会有多个模块\",{\"1\":{\"56\":1}}],[\"通常使用默认构造函数或带参数的构造函数来实现\",{\"1\":{\"71\":1}}],[\"通常简称为data\",{\"1\":{\"63\":1}}],[\"通常需要包括以下几个部分\",{\"1\":{\"39\":1}}],[\"如嵌入式开发\",{\"1\":{\"76\":1}}],[\"如free\",{\"1\":{\"65\":1}}],[\"如ninja以及visual\",{\"1\":{\"38\":1}}],[\"如果可能的话\",{\"1\":{\"86\":1}}],[\"如果获取失败则返回null\",{\"1\":{\"83\":2}}],[\"如果加载失败则返回null\",{\"1\":{\"83\":2}}],[\"如果不使用extern\",{\"1\":{\"79\":1}}],[\"如果不做处理\",{\"1\":{\"79\":1}}],[\"如果不想授权全部那就把对应的写成相应数据库或者数据表\",{\"1\":{\"5\":1}}],[\"如果vector的内存空间不足\",{\"1\":{\"74\":1}}],[\"如果引用计数变为0\",{\"1\":{\"72\":1}}],[\"如果有内存频繁的申请与释放\",{\"1\":{\"70\":1}}],[\"如果有许多数据需要插入数据库\",{\"1\":{\"9\":1}}],[\"如果继续分配将会溢出至内存的其它部分\",{\"1\":{\"66\":1}}],[\"如果一个程序尝试将过多的信息放入栈中将会发生栈溢出\",{\"1\":{\"66\":1}}],[\"如果生成的可执行文件位于其他目录中\",{\"1\":{\"48\":1}}],[\"如果使用默认的名称和路径\",{\"1\":{\"48\":1}}],[\"如果要使用特定的构建工具\",{\"1\":{\"47\":1}}],[\"如果要使用\",{\"1\":{\"43\":1}}],[\"如果要加快写入速度\",{\"1\":{\"12\":1}}],[\"如果项目依赖于\",{\"1\":{\"42\":1}}],[\"如果项目依赖于其他库或框架\",{\"1\":{\"42\":1}}],[\"如果还有其他网站需要走代理\",{\"1\":{\"36\":1}}],[\"如果安装多个版本\",{\"1\":{\"14\":1}}],[\"如果想进行远程访问\",{\"1\":{\"1\":1}}],[\"现在cmake也可以生成现代的构建系统\",{\"1\":{\"38\":1}}],[\"最少知道原则是指\",{\"1\":{\"99\":1}}],[\"最后\",{\"1\":{\"43\":1}}],[\"最后使用\",{\"1\":{\"14\":1}}],[\"最低版本要求\",{\"0\":{\"40\":1}}],[\"最初cmake被设计为的makefile的生成器\",{\"1\":{\"38\":1}}],[\"取消代理\",{\"0\":{\"37\":1}}],[\"进行了设置\",{\"1\":{\"36\":1}}],[\"进行切换\",{\"1\":{\"14\":1}}],[\"方法如下\",{\"1\":{\"35\":1}}],[\"很慢\",{\"1\":{\"35\":1}}],[\"很快\",{\"1\":{\"35\":1}}],[\"到\",{\"1\":{\"35\":1}}],[\"到gitlab\",{\"1\":{\"20\":1}}],[\"浏览器访问\",{\"1\":{\"35\":1}}],[\"电脑上已经启用了代理\",{\"1\":{\"35\":1}}],[\"回滚到指定提交\",{\"1\":{\"34\":1}}],[\"撤销暂存区修改\",{\"1\":{\"34\":1}}],[\"撤销工作区修改\",{\"1\":{\"34\":1}}],[\"撤销操作\",{\"0\":{\"34\":1}}],[\"拉取远程仓库\",{\"1\":{\"33\":1}}],[\"推送到远程仓库\",{\"1\":{\"33\":1}}],[\"推荐使用\",{\"1\":{\"14\":1}}],[\"删除指定位置的节点\",{\"1\":{\"71\":1}}],[\"删除尾节点之前的节点\",{\"1\":{\"71\":1}}],[\"删除头节点之后的节点\",{\"1\":{\"71\":1}}],[\"删除远程分支\",{\"1\":{\"33\":1}}],[\"删除分支\",{\"1\":{\"32\":1}}],[\"删除用户\",{\"1\":{\"6\":1}}],[\"跟踪文件\",{\"1\":{\"31\":1}}],[\"操作系统将在\",{\"1\":{\"85\":1}}],[\"操作文件\",{\"0\":{\"31\":1}}],[\"操作完后刷新权限\",{\"1\":{\"6\":1}}],[\"克隆仓库\",{\"0\":{\"30\":1}}],[\"用于不增加目标代码大小的优化方式\",{\"1\":{\"54\":1}}],[\"用于构建的优化的库或可执行文件\",{\"1\":{\"54\":1}}],[\"用于构建项目\",{\"1\":{\"45\":1}}],[\"用于在没有优化的情况下\",{\"1\":{\"54\":1}}],[\"用于定义项目的源代码\",{\"1\":{\"39\":1}}],[\"用于存储仓库数据\",{\"1\":{\"29\":1}}],[\"用于管理软件项目的源代码\",{\"1\":{\"22\":1}}],[\"创建型\",{\"1\":{\"104\":1}}],[\"创建型模式\",{\"0\":{\"104\":1}}],[\"创建一个shared\",{\"1\":{\"72\":1}}],[\"创建一个新节点\",{\"1\":{\"71\":2}}],[\"创建构建目录\",{\"0\":{\"45\":1}}],[\"创建分支\",{\"1\":{\"32\":1}}],[\"创建仓库\",{\"0\":{\"28\":1}}],[\"创建并切换分支\",{\"1\":{\"19\":1,\"32\":1}}],[\"your\",{\"1\":{\"27\":2}}],[\"配置完成后\",{\"1\":{\"47\":1}}],[\"配置项目\",{\"0\":{\"46\":1}}],[\"配置用户名和邮箱\",{\"1\":{\"27\":1}}],[\"配置git\",{\"0\":{\"27\":1}}],[\"以便在程序运行时能够正确地加载动态库\",{\"1\":{\"86\":1}}],[\"以增强灵活性\",{\"1\":{\"81\":1}}],[\"以提高效率\",{\"1\":{\"81\":1}}],[\"以上是一个简化版的vector实现\",{\"1\":{\"75\":1}}],[\"以上开启远程访问\",{\"0\":{\"1\":1}}],[\"以保证多线程环境下的正确性\",{\"1\":{\"72\":1}}],[\"以防止程序意外修改其指令\",{\"1\":{\"61\":1}}],[\"以防止堆和栈溢出覆盖它\",{\"1\":{\"61\":1}}],[\"以满足特定的需求\",{\"1\":{\"54\":1}}],[\"以下是几种不同的配置交叉编译的方法\",{\"1\":{\"49\":1}}],[\"以下内容为git的基本操作\",{\"1\":{\"22\":1}}],[\"以配置项目\",{\"1\":{\"46\":1}}],[\"分为两部分\",{\"1\":{\"62\":1}}],[\"分支管理\",{\"0\":{\"32\":1}}],[\"分支名\",{\"1\":{\"20\":1}}],[\"分别是\",{\"1\":{\"12\":1}}],[\"远程仓库操作\",{\"0\":{\"33\":1}}],[\"远程删除了分支\",{\"0\":{\"21\":1}}],[\"远程也想删除\",{\"0\":{\"20\":1}}],[\"远程分支名\",{\"1\":{\"19\":2}}],[\"远程有新分支\",{\"0\":{\"19\":1}}],[\"远程没有\",{\"0\":{\"18\":1}}],[\"3\",{\"0\":{\"65\":1},\"1\":{\"16\":1,\"40\":1,\"71\":1,\"84\":1}}],[\"放在当前分支上\",{\"1\":{\"16\":1}}],[\"效果相当于将原来分支上的多个commit合并成一个\",{\"1\":{\"16\":1}}],[\"执行myprogram时\",{\"1\":{\"85\":1}}],[\"执行\",{\"1\":{\"16\":1}}],[\"执行准备相当于将\",{\"1\":{\"10\":1}}],[\"切换方向很可能降低涨薪幅度\",{\"1\":{\"76\":1}}],[\"切换方便\",{\"1\":{\"14\":1}}],[\"切换分支\",{\"1\":{\"32\":1}}],[\"切换到branchb中\",{\"1\":{\"16\":1}}],[\"步骤如下\",{\"1\":{\"16\":1}}],[\"假设要把brancha的代码合并到branchb\",{\"1\":{\"16\":1}}],[\"❌\",{\"1\":{\"15\":4}}],[\"✅\",{\"1\":{\"15\":12}}],[\"被删除的文件\",{\"1\":{\"15\":1}}],[\"被修改的文件\",{\"1\":{\"15\":1}}],[\"件\",{\"1\":{\"15\":1}}],[\"文本段通常是只读的\",{\"1\":{\"61\":1}}],[\"文本段通常是可共享的\",{\"1\":{\"61\":1}}],[\"文本段放在堆或栈的下面\",{\"1\":{\"61\":1}}],[\"文本段\",{\"0\":{\"61\":1},\"1\":{\"61\":1}}],[\"文件名中的版本号也不一定是真的\",{\"1\":{\"90\":1}}],[\"文件\",{\"1\":{\"57\":1}}],[\"文件更加简洁和易读\",{\"1\":{\"54\":1}}],[\"文件中\",{\"1\":{\"50\":2,\"51\":1}}],[\"文件中指定这些依赖项\",{\"1\":{\"42\":1}}],[\"文件后\",{\"1\":{\"44\":1}}],[\"文件添加到源代码中\",{\"1\":{\"41\":1}}],[\"文件的开头\",{\"1\":{\"40\":1}}],[\"文件的编写\",{\"0\":{\"39\":1}}],[\"文件时\",{\"1\":{\"39\":1}}],[\"文\",{\"1\":{\"15\":1}}],[\"新\",{\"1\":{\"15\":1}}],[\"令\",{\"1\":{\"15\":1}}],[\"命\",{\"1\":{\"15\":1}}],[\"命令模式\",{\"1\":{\"106\":1}}],[\"命令可以方便地添加自定义构建规则\",{\"1\":{\"58\":1}}],[\"命令可以方便地生成配置文件\",{\"1\":{\"57\":1}}],[\"命令可以方便地构建子项目\",{\"1\":{\"56\":1}}],[\"命令可以方便地查找和配置依赖项\",{\"1\":{\"55\":1}}],[\"命令设置交叉编译器的根路径\",{\"1\":{\"51\":1}}],[\"命令设置交叉编译工具链\",{\"1\":{\"50\":1}}],[\"命令和\",{\"1\":{\"42\":1,\"43\":1}}],[\"命令来实现\",{\"1\":{\"40\":1,\"41\":1,\"42\":1,\"43\":1}}],[\"命令窗口中\",{\"1\":{\"5\":1}}],[\"命令为\",{\"1\":{\"3\":1}}],[\"各个命令的区别详见下表\",{\"1\":{\"15\":1}}],[\"但缺少运行时灵活性和动态调整能力\",{\"1\":{\"81\":1}}],[\"但实际上\",{\"1\":{\"76\":1}}],[\"但在中间插入和删除元素时效率较低\",{\"1\":{\"71\":1}}],[\"但程序员也可以通过重载操作符\",{\"1\":{\"67\":1}}],[\"但不包括文件名以\",{\"1\":{\"15\":1}}],[\"但是装入过程需要耗费一定的时间和资源\",{\"1\":{\"81\":1}}],[\"但是都采用了相同的机制\",{\"1\":{\"79\":1}}],[\"但是实际使用中发现\",{\"1\":{\"35\":1}}],[\"但是我下载最新的\",{\"1\":{\"14\":1}}],[\"但是我没想到\",{\"1\":{\"14\":1}}],[\"但是数据损坏的可能性较大\",{\"1\":{\"12\":1}}],[\"但是写入速度也最慢\",{\"1\":{\"12\":1}}],[\"但是一般用不到\",{\"1\":{\"11\":1}}],[\"但是在\",{\"1\":{\"2\":1}}],[\"时不提交被删除的文件\",{\"1\":{\"15\":1}}],[\"时表示任意\",{\"1\":{\"4\":1}}],[\"时表示本机\",{\"1\":{\"4\":1}}],[\"而静态库的更新需要重新编译链接\",{\"1\":{\"109\":1}}],[\"而动态库可以被多个程序共享\",{\"1\":{\"109\":1}}],[\"而不是使用继承\",{\"1\":{\"100\":1}}],[\"而不需要担心线程安全问题\",{\"1\":{\"72\":1}}],[\"而不需要使用互斥锁或者其他线程安全的手段\",{\"1\":{\"72\":1}}],[\"而不需要手动指定头文件和库文件路径\",{\"1\":{\"55\":1}}],[\"而基类与子类的继承关系就是抽象化的具体实现\",{\"1\":{\"96\":1}}],[\"而派生类也能够在基类的基础上增加新的行为\",{\"1\":{\"96\":1}}],[\"而在c语言中并没有异常处理机制\",{\"1\":{\"79\":1}}],[\"而在动态库中\",{\"1\":{\"79\":1}}],[\"而list的内存分配是动态的\",{\"1\":{\"71\":1}}],[\"而list在任意位置插入和删除元素的效率都很高\",{\"1\":{\"71\":1}}],[\"而list不支持随机访问\",{\"1\":{\"71\":1}}],[\"而list采用链式结构存储元素\",{\"1\":{\"71\":1}}],[\"而且它们所占用的内存将会被释放\",{\"1\":{\"66\":1}}],[\"而且堆区内存访问需要用到指针\",{\"1\":{\"65\":1}}],[\"而像const\",{\"1\":{\"63\":1}}],[\"而新文件因为未被跟踪\",{\"1\":{\"15\":1}}],[\"而\",{\"1\":{\"15\":1}}],[\"的书\",{\"1\":{\"93\":1}}],[\"的列表\",{\"1\":{\"91\":1}}],[\"的格式\",{\"1\":{\"84\":1}}],[\"的格式存储在磁盘上\",{\"1\":{\"77\":1}}],[\"的内存\",{\"1\":{\"69\":1}}],[\"的运行时间\",{\"1\":{\"69\":1}}],[\"的代码耗用了大约\",{\"1\":{\"69\":1}}],[\"的代码使用了\",{\"1\":{\"69\":2}}],[\"的程序资源\",{\"1\":{\"69\":1}}],[\"的结构\",{\"1\":{\"66\":1}}],[\"的全局变量将包含在\",{\"1\":{\"64\":1}}],[\"的变量将包含在\",{\"1\":{\"64\":1}}],[\"的int\",{\"1\":{\"63\":1}}],[\"的最低版本要求\",{\"1\":{\"40\":1}}],[\"的配置文件\",{\"1\":{\"39\":1}}],[\"的功能做了改动\",{\"1\":{\"15\":1}}],[\"的正确方法\",{\"0\":{\"14\":1}}],[\"对象性能\",{\"1\":{\"107\":1}}],[\"对象创建\",{\"1\":{\"107\":1}}],[\"对修改关闭\",{\"1\":{\"95\":1}}],[\"对扩展开放\",{\"1\":{\"95\":1}}],[\"对接口编程而不是对实现编程\",{\"1\":{\"93\":1}}],[\"对于c++写的动态库\",{\"1\":{\"79\":1}}],[\"对于\",{\"1\":{\"15\":1}}],[\"对\",{\"1\":{\"15\":1}}],[\"xxx\",{\"1\":{\"112\":1,\"113\":2,\"114\":2,\"115\":1,\"116\":1}}],[\"xxx2\",{\"1\":{\"110\":1,\"112\":1}}],[\"xxx1\",{\"1\":{\"110\":1,\"112\":1}}],[\"x\",{\"1\":{\"15\":6,\"71\":2}}],[\"x64\",{\"1\":{\"14\":1}}],[\"确认安装成功\",{\"1\":{\"14\":1}}],[\"确认是否添加成功\",{\"1\":{\"4\":1}}],[\"来创建一个初始值为1的std\",{\"1\":{\"72\":1}}],[\"来构建或可执行文件\",{\"1\":{\"54\":1}}],[\"来选择要使用的版本\",{\"1\":{\"14\":1}}],[\"来安装\",{\"1\":{\"14\":1}}],[\"我们需要使用接口和抽象类\",{\"1\":{\"95\":1}}],[\"我们可以在多线程环境下安全地使用shared\",{\"1\":{\"72\":1}}],[\"我们使用new\",{\"1\":{\"72\":1}}],[\"我们使用了std\",{\"1\":{\"72\":1}}],[\"我们指定了项目名称为\",{\"1\":{\"41\":1}}],[\"我只针对\",{\"1\":{\"36\":1}}],[\"我用的安装命令是\",{\"1\":{\"14\":1}}],[\"我在自己电脑上测试了以上各种情况\",{\"1\":{\"13\":1}}],[\"比使用单个接口要好\",{\"1\":{\"98\":1}}],[\"比如c语言中char\",{\"1\":{\"63\":1}}],[\"比\",{\"1\":{\"14\":1}}],[\"并指定源文件为mylib\",{\"1\":{\"87\":1}}],[\"并指定源文件\",{\"1\":{\"87\":1}}],[\"并快速达到同等工作能力\",{\"1\":{\"76\":1}}],[\"并释放内存\",{\"1\":{\"71\":3}}],[\"并生成指定的输出文件\",{\"1\":{\"58\":1}}],[\"并且该职责被完整地封装在一个类中\",{\"1\":{\"101\":1}}],[\"并且能够保证动态库文件的安全性和稳定性\",{\"1\":{\"86\":1}}],[\"并且绑定失败也有一定几率\",{\"1\":{\"81\":1}}],[\"并且在析构函数中使用delete\",{\"1\":{\"75\":1}}],[\"并且使用一些优化策略来提高效率\",{\"1\":{\"74\":1}}],[\"并且具有快速的插入和删除效率\",{\"1\":{\"71\":1}}],[\"并且可以方便地修改编译选项和路径等常量\",{\"1\":{\"54\":1}}],[\"并且几乎不会损坏数据\",{\"1\":{\"12\":1}}],[\"并将该目录添加到可执行程序的运行时搜索路径中\",{\"1\":{\"86\":1}}],[\"并将size减1\",{\"1\":{\"74\":1}}],[\"并将新元素插入到末尾\",{\"1\":{\"74\":1}}],[\"并将指针指向动态内存\",{\"1\":{\"72\":1}}],[\"并将原有元素复制到新的内存空间中\",{\"1\":{\"71\":1,\"74\":1}}],[\"并将其包含在项目中\",{\"1\":{\"57\":1}}],[\"并将其命名为\",{\"1\":{\"45\":1}}],[\"并将它链接到\",{\"1\":{\"56\":1}}],[\"并将生成的可执行文件命名为\",{\"1\":{\"41\":1}}],[\"并安装\",{\"1\":{\"14\":1}}],[\"gang\",{\"1\":{\"93\":1}}],[\"gamma\",{\"1\":{\"93\":1}}],[\"gof\",{\"1\":{\"93\":1}}],[\"grep\",{\"1\":{\"90\":1}}],[\"grant\",{\"1\":{\"5\":2,\"6\":1}}],[\"g++\",{\"1\":{\"50\":2,\"80\":1,\"82\":1}}],[\"gcc\",{\"1\":{\"50\":2,\"85\":1,\"86\":1}}],[\"g\",{\"1\":{\"47\":2}}],[\"global\",{\"1\":{\"27\":2,\"36\":1,\"37\":1}}],[\"getprocaddress函数用来获取动态库文件中导出的函数和数据\",{\"1\":{\"83\":1}}],[\"getprocaddress\",{\"1\":{\"83\":1}}],[\"getnode\",{\"1\":{\"71\":3}}],[\"get\",{\"1\":{\"26\":1,\"59\":1}}],[\"git笔记\",{\"0\":{\"117\":1}}],[\"git设置代理\",{\"0\":{\"35\":1}}],[\"git的隐藏目录\",{\"1\":{\"29\":1}}],[\"git是一个分布式版本控制系统\",{\"1\":{\"22\":1}}],[\"git基本操作\",{\"0\":{\"22\":1}}],[\"gitee进行删除\",{\"1\":{\"20\":1}}],[\"git同步远程仓库分支\",{\"0\":{\"17\":1}}],[\"git不同分支代码的合并\",{\"0\":{\"16\":1}}],[\"git\",{\"0\":{\"15\":1},\"1\":{\"15\":12,\"16\":3,\"18\":1,\"19\":3,\"20\":1,\"21\":1,\"25\":1,\"26\":1,\"27\":3,\"29\":1,\"30\":1,\"31\":6,\"32\":6,\"33\":5,\"34\":3,\"35\":2,\"36\":1,\"37\":1}}],[\"github\",{\"1\":{\"14\":1,\"20\":1,\"35\":2,\"36\":2,\"37\":1}}],[\"还需要加上extern\",{\"1\":{\"79\":1}}],[\"还可以实现多个\",{\"1\":{\"14\":1}}],[\"还是在上面的\",{\"1\":{\"5\":1}}],[\"查看静态库包含哪些目标文件\",{\"1\":{\"110\":1}}],[\"查看被依赖项\",{\"0\":{\"91\":1}}],[\"查看版本号\",{\"0\":{\"90\":1}}],[\"查看远程仓库\",{\"1\":{\"33\":1}}],[\"查看分支\",{\"1\":{\"32\":1}}],[\"查看简洁的提交历史\",{\"1\":{\"31\":1}}],[\"查看提交历史\",{\"1\":{\"31\":1}}],[\"查看文件状态\",{\"1\":{\"31\":1}}],[\"查看配置信息\",{\"1\":{\"27\":1}}],[\"查看所有分支\",{\"1\":{\"19\":1}}],[\"查看\",{\"1\":{\"14\":3}}],[\"查看发现是\",{\"1\":{\"14\":1}}],[\"于是我就卸载了\",{\"1\":{\"14\":1}}],[\"无法使用\",{\"1\":{\"14\":1}}],[\"此时会自动释放该动态内存\",{\"1\":{\"72\":1}}],[\"此时也可以直接运行\",{\"1\":{\"47\":1}}],[\"此外\",{\"1\":{\"61\":1,\"72\":1}}],[\"此\",{\"1\":{\"14\":1}}],[\"4\",{\"0\":{\"66\":1},\"1\":{\"14\":1,\"71\":1}}],[\"6\",{\"1\":{\"14\":1,\"71\":1}}],[\"包括重定位表的地址\",{\"1\":{\"91\":1}}],[\"包括前缀\",{\"1\":{\"84\":1}}],[\"包括整个工作区中修改和被删除的文件\",{\"1\":{\"15\":1}}],[\"包括整个工作区中的新增\",{\"1\":{\"15\":1}}],[\"包括新增\",{\"1\":{\"15\":2}}],[\"包括子目录\",{\"1\":{\"15\":2}}],[\"包含了很多细节和优化\",{\"1\":{\"75\":1}}],[\"包含所有初始化为零或在源代码中没有显式初始化的全局变量和静态变量\",{\"1\":{\"64\":1}}],[\"包含调试符号\",{\"1\":{\"54\":1}}],[\"包含\",{\"1\":{\"14\":1}}],[\"包管理器\",{\"1\":{\"14\":1}}],[\"长期维护版\",{\"1\":{\"14\":1}}],[\"版本来说\",{\"1\":{\"15\":1}}],[\"版本相比\",{\"1\":{\"15\":1}}],[\"版本号和扩展名\",{\"1\":{\"84\":1}}],[\"版本号\",{\"1\":{\"14\":1}}],[\"版本更稳定\",{\"1\":{\"14\":1}}],[\"版本共存\",{\"1\":{\"14\":1}}],[\"版本为用\",{\"1\":{\"14\":1}}],[\"版本不匹配\",{\"1\":{\"14\":1}}],[\"版本太低\",{\"1\":{\"14\":1}}],[\"版本\",{\"1\":{\"14\":6,\"15\":1}}],[\"下面是一个简化版的vector实现源码\",{\"1\":{\"75\":1}}],[\"下面是一个简化版的list实现源码\",{\"1\":{\"71\":1}}],[\"下面是一个使用原子操作实现的线程安全的shared\",{\"1\":{\"72\":1}}],[\"下面是基本的项目配置和构建步骤\",{\"1\":{\"44\":1}}],[\"下面详细说明c++\",{\"1\":{\"71\":1}}],[\"下的所有的文件改动提交至暂存区\",{\"1\":{\"15\":2}}],[\"下的配置文件为\",{\"1\":{\"3\":1}}],[\"下载\",{\"1\":{\"14\":1}}],[\"下载安装包进行安装\",{\"1\":{\"14\":1}}],[\"zh\",{\"1\":{\"14\":2}}],[\"网上的文章一般是让大家从\",{\"1\":{\"14\":1}}],[\"网上搜到的很多资料都是基于老版本的\",{\"1\":{\"1\":1}}],[\"官网上写的是node\",{\"1\":{\"14\":1}}],[\"官网上的安装包竟然也有坑\",{\"1\":{\"14\":1}}],[\"官网https\",{\"1\":{\"14\":1}}],[\"官方文档写得过于详细\",{\"1\":{\"1\":1}}],[\"其实设计模式就是从大型软件架构出发\",{\"1\":{\"98\":1}}],[\"其实安装过程是很简单的\",{\"1\":{\"14\":1}}],[\"其中包含由程序员初始化的全局变量和静态变量\",{\"1\":{\"63\":1}}],[\"其中包含可执行指令\",{\"1\":{\"61\":1}}],[\"其中\",{\"1\":{\"4\":1,\"5\":1,\"46\":1,\"80\":1,\"82\":1,\"83\":2,\"85\":2,\"86\":1}}],[\"john\",{\"1\":{\"93\":1}}],[\"johnson\",{\"1\":{\"93\":1}}],[\"j\",{\"1\":{\"64\":1}}],[\"javascript\",{\"1\":{\"14\":2}}],[\"js下的\",{\"1\":{\"14\":1}}],[\"js\",{\"0\":{\"14\":1},\"1\":{\"14\":8}}],[\"是继承复用的基石\",{\"1\":{\"96\":1}}],[\"是为了使程序的扩展性好\",{\"1\":{\"95\":1}}],[\"是目标文件或内存中程序的一部分\",{\"1\":{\"61\":1}}],[\"是源代码目录的路径\",{\"1\":{\"46\":1}}],[\"是代理的端口号\",{\"1\":{\"36\":1}}],[\"是\",{\"1\":{\"14\":1,\"39\":1}}],[\"是默认没有密码的\",{\"1\":{\"2\":1}}],[\"9\",{\"1\":{\"13\":1}}],[\"977747\",{\"1\":{\"13\":1}}],[\"999\",{\"1\":{\"9\":1,\"10\":1,\"11\":1}}],[\"默认是不走代理的\",{\"1\":{\"35\":1}}],[\"默认\",{\"1\":{\"13\":1}}],[\"默认synchronous值为full\",{\"1\":{\"12\":1}}],[\"数据结构\",{\"1\":{\"107\":1}}],[\"数据\",{\"1\":{\"71\":1}}],[\"数据段不是只读的\",{\"1\":{\"63\":1}}],[\"数据段是程序虚拟地址空间的一部分\",{\"1\":{\"63\":1}}],[\"数据段\",{\"0\":{\"62\":1},\"1\":{\"60\":1}}],[\"数据如下表\",{\"1\":{\"13\":1}}],[\"数据写入完整之后\",{\"1\":{\"11\":1}}],[\"打印程序执行所用的时间\",{\"1\":{\"13\":1}}],[\"打开\",{\"1\":{\"11\":1}}],[\"测试结果\",{\"0\":{\"13\":1}}],[\"速度比full快\",{\"1\":{\"12\":1}}],[\"安装git\",{\"0\":{\"23\":1}}],[\"安装\",{\"1\":{\"14\":1}}],[\"安装完后使用\",{\"1\":{\"14\":1}}],[\"安装完后用\",{\"1\":{\"14\":1}}],[\"安装完\",{\"1\":{\"14\":1}}],[\"安装后发现npm版本有问题\",{\"1\":{\"14\":1}}],[\"安装的\",{\"1\":{\"2\":1}}],[\"安全性最高\",{\"1\":{\"12\":1}}],[\"保证数据不会损坏\",{\"1\":{\"12\":1}}],[\"和释放内存\",{\"1\":{\"65\":1}}],[\"和\",{\"0\":{\"14\":1},\"1\":{\"12\":1,\"41\":1,\"50\":1,\"58\":1,\"93\":1}}],[\"有些动态库的版本号没有写在文件名中\",{\"1\":{\"90\":1}}],[\"有相当工作经验的\",{\"1\":{\"76\":1}}],[\"有三种模式\",{\"1\":{\"12\":1}}],[\"有10000条数据需要插入数据库\",{\"1\":{\"8\":1}}],[\"中介者模式\",{\"1\":{\"106\":1}}],[\"中文译名\",{\"1\":{\"93\":1}}],[\"中包含进去\",{\"1\":{\"50\":1}}],[\"中如果想在使用\",{\"1\":{\"15\":1}}],[\"中\",{\"1\":{\"12\":1}}],[\"毕竟我们一般用数据库就是为了数据的持久保存和读取\",{\"1\":{\"11\":1}}],[\"20\",{\"1\":{\"69\":3}}],[\"20准则\",{\"1\":{\"69\":1}}],[\"2\",{\"0\":{\"62\":1,\"63\":1,\"64\":2},\"1\":{\"10\":1,\"11\":1,\"14\":2,\"15\":4,\"16\":1,\"71\":1,\"75\":1,\"83\":2,\"84\":1}}],[\"语句的执行效率\",{\"1\":{\"10\":1}}],[\"语句时候的语法检查等操作\",{\"1\":{\"10\":1}}],[\"语句提前编译\",{\"1\":{\"10\":1}}],[\"省去每次执行\",{\"1\":{\"10\":1}}],[\"可复用的面向对象软件元素\",{\"1\":{\"93\":1}}],[\"可通过以下两种命令查看\",{\"1\":{\"90\":1}}],[\"可配置版本号\",{\"1\":{\"57\":1}}],[\"可执行文件中\",{\"1\":{\"56\":1}}],[\"可选值包括\",{\"1\":{\"54\":1}}],[\"可加上\",{\"1\":{\"15\":1}}],[\"可将该文件添加到暂存区\",{\"1\":{\"15\":1}}],[\"可以解决特定问题的设计方法\",{\"1\":{\"93\":1}}],[\"可以得知动态链接库中是否存在未解决的符号引用或符号冲突等问题\",{\"1\":{\"91\":1}}],[\"可以被多个程序共享使用\",{\"1\":{\"77\":1}}],[\"可以支持任意类型的元素\",{\"1\":{\"75\":1}}],[\"可以支持在任意位置插入和删除元素\",{\"1\":{\"71\":1}}],[\"可以在释放动态内存时调用指定的删除器函数\",{\"1\":{\"72\":1}}],[\"可以在本地主机上构建针对嵌入式设备的代码\",{\"1\":{\"49\":1}}],[\"可以通过指针的前移和后移来实现遍历\",{\"1\":{\"71\":1}}],[\"可以通过下标访问元素\",{\"1\":{\"71\":1,\"74\":1}}],[\"可以考虑内存池\",{\"1\":{\"70\":1}}],[\"可以将函数的调用惯例设置为c语言风格的调用惯例\",{\"1\":{\"79\":1}}],[\"可以将函数的名称转换为c语言风格的名称\",{\"1\":{\"79\":1}}],[\"可以将经常需要读取的资源\",{\"1\":{\"70\":1}}],[\"可以将以上设置的内容保存到\",{\"1\":{\"50\":1}}],[\"可以使用环境变量ld\",{\"1\":{\"85\":1}}],[\"可以使用编译器的\",{\"1\":{\"85\":1}}],[\"可以使用以下方法指定动态库的路径\",{\"1\":{\"85\":1}}],[\"可以使用以下函数来动态加载和卸载动态库\",{\"1\":{\"83\":2}}],[\"可以使用以下命令将动态库文件链接到程序中\",{\"1\":{\"82\":1}}],[\"可以使用以下命令将目标文件编译成动态库文件\",{\"1\":{\"80\":1}}],[\"可以使用以下命令\",{\"1\":{\"42\":1,\"43\":1,\"46\":1,\"47\":1,\"48\":1}}],[\"可以使用迭代器来遍历vector中的元素\",{\"1\":{\"74\":1}}],[\"可以使用\",{\"1\":{\"47\":1,\"78\":2}}],[\"可以指定一些选项\",{\"1\":{\"46\":1}}],[\"可以按照此方法进行设置\",{\"1\":{\"36\":1}}],[\"可以看到刚安装的\",{\"1\":{\"14\":1}}],[\"可以设置为normal\",{\"1\":{\"12\":1}}],[\"可以先将数据库创建到内存中\",{\"1\":{\"11\":1}}],[\"可以节省写文件时间\",{\"1\":{\"11\":1}}],[\"可以极大优化\",{\"1\":{\"10\":1}}],[\"可以极大的提升写入速度\",{\"1\":{\"9\":1}}],[\"可以批量插入数据\",{\"1\":{\"9\":1}}],[\"可跳过\",{\"1\":{\"2\":1}}],[\"逐条插入\",{\"1\":{\"9\":1}}],[\"lxxx\",{\"1\":{\"110\":1}}],[\"l选项指定了要链接的动态库名称\",{\"1\":{\"85\":1}}],[\"l选项指定了动态库的搜索路径\",{\"1\":{\"85\":1}}],[\"l选项指定动态库的搜索路径\",{\"1\":{\"85\":1}}],[\"l选项指定动态库文件的名称\",{\"1\":{\"82\":1}}],[\"l选项指定动态库文件的路径\",{\"1\":{\"82\":1}}],[\"l选项\",{\"1\":{\"85\":1}}],[\"lazy\",{\"1\":{\"83\":1}}],[\"last\",{\"1\":{\"66\":1}}],[\"lmylib\",{\"1\":{\"82\":1,\"85\":1,\"86\":1}}],[\"l\",{\"1\":{\"82\":1,\"85\":1,\"86\":1}}],[\"liskov\",{\"0\":{\"96\":1}}],[\"list的赋值运算符需要先清空原有的元素\",{\"1\":{\"71\":1}}],[\"list的类包含两个成员变量\",{\"1\":{\"71\":1}}],[\"list的迭代器类是一个指向节点的指针\",{\"1\":{\"71\":1}}],[\"list的节点结构体包含三个成员变量\",{\"1\":{\"71\":1}}],[\"list的主要区别在于\",{\"1\":{\"71\":1}}],[\"list的实现过程\",{\"1\":{\"71\":1}}],[\"list的实现\",{\"0\":{\"71\":1}}],[\"list\",{\"1\":{\"14\":1,\"27\":1,\"71\":8}}],[\"libnnn\",{\"1\":{\"116\":1}}],[\"libmmm\",{\"1\":{\"116\":1}}],[\"libmylib\",{\"1\":{\"80\":1,\"83\":1,\"90\":2,\"91\":1}}],[\"libxxx\",{\"1\":{\"110\":3}}],[\"library命令查找名为mylib的动态库\",{\"1\":{\"88\":1}}],[\"library命令查找动态库\",{\"1\":{\"88\":1}}],[\"library命令创建一个名为mylib的动态库\",{\"1\":{\"87\":1}}],[\"library\",{\"1\":{\"85\":6,\"87\":3,\"88\":1,\"112\":1}}],[\"libraries命令将动态库链接到名为myapp的目标文件\",{\"1\":{\"88\":1}}],[\"libraries\",{\"1\":{\"42\":2,\"55\":1,\"56\":1,\"88\":1,\"116\":1}}],[\"lib目录下\",{\"1\":{\"84\":2}}],[\"lib和\",{\"1\":{\"84\":1}}],[\"lib\",{\"1\":{\"56\":3,\"84\":1,\"87\":2,\"88\":2,\"114\":1}}],[\"libs\",{\"1\":{\"55\":1}}],[\"linux系统中的动态库路径规范如下\",{\"1\":{\"84\":1}}],[\"linux\",{\"1\":{\"50\":8,\"52\":2,\"109\":1}}],[\"link\",{\"1\":{\"42\":2,\"55\":1,\"56\":1,\"88\":2,\"116\":1}}],[\"local\",{\"1\":{\"84\":1}}],[\"localhost\",{\"1\":{\"1\":1,\"2\":1,\"4\":1}}],[\"loadlibrarya函数用来加载动态库文件\",{\"1\":{\"83\":1}}],[\"loadlibrarya\",{\"1\":{\"83\":1}}],[\"log\",{\"1\":{\"31\":2}}],[\"lsp\",{\"1\":{\"96\":1}}],[\"ls\",{\"1\":{\"14\":1}}],[\"learn\",{\"1\":{\"14\":1}}],[\"lts\",{\"1\":{\"14\":3}}],[\"ldd\",{\"1\":{\"91\":2}}],[\"ldd命令将会显示动态链接库的重定位信息\",{\"1\":{\"91\":1}}],[\"ldd命令可以帮助用户诊断软件运行时出现的问题\",{\"1\":{\"91\":1}}],[\"ldd如果加上\",{\"1\":{\"91\":1}}],[\"ldd是一个linux命令\",{\"1\":{\"91\":1}}],[\"ld\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"85\":3}}],[\"hinstance\",{\"1\":{\"83\":1}}],[\"h>\",{\"1\":{\"83\":2}}],[\"h\",{\"1\":{\"57\":6}}],[\"http\",{\"1\":{\"36\":1,\"37\":1}}],[\"https\",{\"1\":{\"14\":2,\"36\":1,\"37\":1}}],[\"handle\",{\"1\":{\"83\":8}}],[\"hash\",{\"1\":{\"34\":1}}],[\"hard\",{\"1\":{\"34\":1}}],[\"helm\",{\"1\":{\"93\":1}}],[\"hello\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"63\":3}}],[\"heap\",{\"0\":{\"65\":1}}],[\"head\",{\"1\":{\"34\":1,\"71\":9}}],[\"host\",{\"1\":{\"4\":3,\"5\":2,\"6\":1}}],[\"visitor\",{\"1\":{\"106\":1,\"107\":1}}],[\"visibility\",{\"1\":{\"78\":2}}],[\"vlissides\",{\"1\":{\"93\":1}}],[\"vector\",{\"1\":{\"75\":9}}],[\"vector的迭代器类型是指向元素的指针\",{\"1\":{\"74\":1}}],[\"vector的实现中还包含了一些常用的成员函数\",{\"1\":{\"75\":1}}],[\"vector的实现原理基于动态数组\",{\"1\":{\"74\":1}}],[\"vector的实现\",{\"0\":{\"73\":1}}],[\"vector会调用元素的析构函数来销毁元素\",{\"1\":{\"74\":1}}],[\"vector会自动扩容\",{\"1\":{\"74\":1}}],[\"vector支持迭代器\",{\"1\":{\"74\":1}}],[\"vector支持在末尾添加元素和删除末尾元素\",{\"1\":{\"74\":1}}],[\"vector支持随机访问\",{\"1\":{\"71\":1,\"74\":1}}],[\"vector内部使用一个指针来指向第一个元素的内存地址\",{\"1\":{\"74\":1}}],[\"vector使用new运算符来分配内存\",{\"1\":{\"74\":1}}],[\"vector在内存空间不足时会自动扩容\",{\"1\":{\"71\":1,\"74\":1}}],[\"vector在末尾插入和删除元素的效率很高\",{\"1\":{\"71\":1}}],[\"vector采用连续的内存空间存储元素\",{\"1\":{\"71\":1}}],[\"version\",{\"1\":{\"40\":1,\"57\":11}}],[\"v$\",{\"1\":{\"57\":1}}],[\"v\",{\"1\":{\"14\":4,\"33\":1}}],[\"v18\",{\"1\":{\"14\":2}}],[\"value\",{\"1\":{\"71\":6,\"75\":2}}],[\"values\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"vacuum\",{\"1\":{\"11\":2}}],[\"v2\",{\"1\":{\"10\":1,\"11\":1}}],[\"void\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"71\":6,\"75\":6,\"83\":1}}],[\"<windows\",{\"1\":{\"83\":1}}],[\"<dlfcn\",{\"1\":{\"83\":1}}],[\"<typename\",{\"1\":{\"72\":1}}],[\"<iostream>\",{\"1\":{\"72\":1}}],[\"<atomic>\",{\"1\":{\"72\":1}}],[\"<\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"75\":2}}],[\"more\",{\"1\":{\"69\":1}}],[\"mangled\",{\"1\":{\"79\":1}}],[\"major\",{\"1\":{\"57\":4}}],[\"make\",{\"1\":{\"47\":2}}],[\"makefiles\",{\"1\":{\"47\":1}}],[\"main\",{\"1\":{\"41\":2,\"54\":1,\"82\":2}}],[\"mkdir\",{\"1\":{\"45\":1}}],[\"method\",{\"1\":{\"106\":1,\"107\":2}}],[\"memento\",{\"1\":{\"106\":1,\"107\":1}}],[\"memory\",{\"1\":{\"11\":2}}],[\"mediator\",{\"1\":{\"106\":1,\"107\":1}}],[\"message\",{\"1\":{\"31\":1}}],[\"merge\",{\"1\":{\"16\":1,\"32\":1}}],[\"minor\",{\"1\":{\"57\":4}}],[\"minsizerel\",{\"1\":{\"54\":1}}],[\"minimum\",{\"1\":{\"40\":2}}],[\"microsoft\",{\"1\":{\"14\":1}}],[\"milliseconds>\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"msi\",{\"1\":{\"14\":1}}],[\"ms\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"13\":1}}],[\"msg\",{\"1\":{\"8\":2,\"9\":2,\"10\":2,\"11\":2}}],[\"m\",{\"1\":{\"8\":2,\"9\":2,\"10\":2,\"11\":2,\"16\":1,\"31\":1}}],[\"myprogram\",{\"1\":{\"85\":3,\"86\":2}}],[\"myproject\",{\"1\":{\"41\":2}}],[\"myapp是生成的可执行文件名\",{\"1\":{\"82\":1}}],[\"myapp\",{\"1\":{\"82\":1,\"88\":1,\"91\":1}}],[\"mylib选项指定了运行时动态库搜索路径\",{\"1\":{\"86\":1}}],[\"mylib目录下搜索动态库文件\",{\"1\":{\"85\":1}}],[\"mylib目录下搜索名为libmylib\",{\"1\":{\"85\":1,\"86\":1}}],[\"mylib\",{\"1\":{\"80\":2,\"83\":1,\"85\":2,\"86\":2,\"87\":4,\"88\":3}}],[\"my\",{\"1\":{\"3\":1,\"41\":2,\"42\":1,\"48\":2,\"54\":1,\"55\":1,\"56\":5,\"58\":6}}],[\"mysqld\",{\"1\":{\"3\":2}}],[\"mysql\",{\"0\":{\"1\":1},\"1\":{\"1\":2,\"2\":5,\"3\":7,\"4\":2,\"5\":1}}],[\"event\",{\"1\":{\"107\":1}}],[\"elements\",{\"1\":{\"93\":1}}],[\"elapsed\",{\"1\":{\"8\":2,\"9\":2,\"10\":2,\"11\":2}}],[\"erich\",{\"1\":{\"93\":1}}],[\"erase\",{\"1\":{\"71\":5}}],[\"empty\",{\"1\":{\"71\":2,\"75\":1}}],[\"email\",{\"1\":{\"27\":2}}],[\"effective\",{\"1\":{\"69\":1}}],[\"export\",{\"1\":{\"85\":1}}],[\"explicit\",{\"1\":{\"71\":1,\"75\":1}}],[\"extern\",{\"0\":{\"79\":1},\"1\":{\"79\":1}}],[\"example\",{\"1\":{\"27\":1}}],[\"exe\",{\"1\":{\"14\":1,\"41\":2,\"42\":1,\"48\":2,\"54\":1,\"55\":1,\"56\":2}}],[\"executable\",{\"1\":{\"41\":2,\"54\":1}}],[\"exec\",{\"1\":{\"8\":2,\"9\":6,\"10\":5,\"11\":6,\"12\":1}}],[\"environment\",{\"1\":{\"14\":1}}],[\"endif\",{\"1\":{\"57\":1,\"79\":2}}],[\"end\",{\"1\":{\"8\":2,\"9\":2,\"10\":2,\"11\":2,\"71\":4,\"75\":4}}],[\"etc\",{\"1\":{\"3\":1}}],[\"next\",{\"1\":{\"71\":4}}],[\"new\",{\"1\":{\"32\":2,\"71\":7,\"72\":2,\"75\":14}}],[\"name\",{\"1\":{\"27\":2,\"32\":5,\"33\":7,\"50\":1,\"59\":1,\"79\":1,\"87\":1,\"113\":1,\"114\":1}}],[\"native\",{\"1\":{\"2\":1}}],[\"nvm\",{\"1\":{\"14\":10}}],[\"npm\",{\"0\":{\"14\":1},\"1\":{\"14\":8}}],[\"no\",{\"1\":{\"116\":1}}],[\"nodejs\",{\"1\":{\"14\":3}}],[\"node\",{\"0\":{\"14\":1},\"1\":{\"14\":9,\"71\":34}}],[\"normal\",{\"1\":{\"12\":1,\"13\":1}}],[\"now\",{\"1\":{\"8\":2,\"9\":2,\"10\":2,\"11\":2}}],[\"n\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"71\":6,\"75\":4}}],[\"nullptr\",{\"1\":{\"71\":3,\"72\":1,\"75\":1}}],[\"null\",{\"1\":{\"8\":1,\"9\":1,\"10\":2,\"11\":2,\"83\":4,\"106\":1}}],[\"==\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"71\":2,\"72\":2,\"75\":3,\"83\":5}}],[\"=\",{\"1\":{\"8\":6,\"9\":6,\"10\":9,\"11\":9,\"63\":2,\"71\":19,\"72\":3,\"75\":10,\"83\":9}}],[\"tmp\",{\"1\":{\"75\":2}}],[\"this\",{\"1\":{\"71\":3,\"72\":2,\"75\":2}}],[\"t\",{\"1\":{\"71\":9,\"72\":4,\"75\":21,\"110\":1}}],[\"t>\",{\"1\":{\"71\":1,\"72\":1,\"75\":1}}],[\"typedef\",{\"1\":{\"75\":1,\"83\":1}}],[\"type\",{\"1\":{\"54\":1}}],[\"type=release\",{\"1\":{\"46\":1}}],[\"tail\",{\"1\":{\"71\":9}}],[\"target\",{\"1\":{\"42\":2,\"55\":1,\"56\":1,\"58\":3,\"87\":2,\"88\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1}}],[\"table\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"txt文件中\",{\"1\":{\"87\":2,\"88\":2}}],[\"txt\",{\"0\":{\"39\":1},\"1\":{\"39\":2,\"40\":1,\"42\":1,\"44\":1,\"50\":2,\"51\":1,\"54\":1,\"58\":4}}],[\"template\",{\"1\":{\"72\":1,\"106\":1,\"107\":1}}],[\"template<typename\",{\"1\":{\"71\":1,\"75\":1}}],[\"text\",{\"0\":{\"61\":1},\"1\":{\"8\":1,\"9\":1,\"10\":2,\"11\":2}}],[\"test3执行时间\",{\"1\":{\"11\":1}}],[\"test3\",{\"1\":{\"11\":2}}],[\"test2执行时间\",{\"1\":{\"10\":1}}],[\"test2\",{\"1\":{\"10\":2}}],[\"test1执行时间\",{\"1\":{\"9\":1}}],[\"test1\",{\"1\":{\"9\":2}}],[\"test\",{\"1\":{\"8\":2,\"9\":2,\"10\":2,\"11\":2}}],[\"test0执行时间\",{\"1\":{\"8\":1}}],[\"test0\",{\"1\":{\"8\":2}}],[\"toolchain\",{\"1\":{\"51\":2,\"52\":2}}],[\"to\",{\"1\":{\"5\":1,\"46\":3,\"48\":1,\"50\":3,\"51\":4,\"52\":2,\"85\":4,\"86\":4}}],[\"场景描述\",{\"0\":{\"8\":1}}],[\"收回赋权权限\",{\"1\":{\"6\":1}}],[\"收回权限\",{\"1\":{\"6\":1}}],[\"收回权限和删除用户\",{\"0\":{\"6\":1}}],[\"不能去修改原有的代码\",{\"1\":{\"95\":1}}],[\"不能被其它进程获取\",{\"1\":{\"65\":1}}],[\"不同的编译器可能生成的名字不同\",{\"1\":{\"79\":1}}],[\"不同方向的学习成本与切换成本也会较高\",{\"1\":{\"76\":1}}],[\"不移动head\",{\"1\":{\"16\":1}}],[\"不提交\",{\"1\":{\"16\":1}}],[\"不包含调试符号\",{\"1\":{\"54\":1}}],[\"不包含赋权权限\",{\"1\":{\"6\":1}}],[\"不包括被删除的文件\",{\"1\":{\"15\":1}}],[\"不包括当前所在目录之外的文件\",{\"1\":{\"15\":2}}],[\"不受当前所在目录限制\",{\"1\":{\"15\":2}}],[\"不优化\",{\"1\":{\"13\":1}}],[\"不会损坏\",{\"1\":{\"12\":1}}],[\"不是100\",{\"1\":{\"12\":1}}],[\"不建议设为off\",{\"1\":{\"12\":1}}],[\"不安全\",{\"1\":{\"2\":1}}],[\"附\",{\"0\":{\"6\":1}}],[\"facade\",{\"1\":{\"105\":1,\"107\":1}}],[\"factory\",{\"1\":{\"104\":2,\"107\":2}}],[\"false\",{\"1\":{\"83\":1}}],[\"fpic\",{\"1\":{\"80\":1}}],[\"front\",{\"1\":{\"71\":4}}],[\"from\",{\"1\":{\"4\":1,\"6\":3}}],[\"freelibrary函数用来卸载动态库文件\",{\"1\":{\"83\":1}}],[\"freelibrary\",{\"1\":{\"83\":1}}],[\"free\",{\"0\":{\"67\":1}}],[\"four\",{\"1\":{\"93\":1}}],[\"folder\",{\"1\":{\"59\":1}}],[\"for\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"71\":2,\"75\":2}}],[\"flyweight\",{\"1\":{\"105\":1,\"107\":1}}],[\"flags\",{\"1\":{\"54\":2}}],[\"flush\",{\"1\":{\"5\":1,\"6\":1}}],[\"filter\",{\"1\":{\"105\":1}}],[\"filename\",{\"1\":{\"59\":1}}],[\"files\",{\"1\":{\"54\":2}}],[\"file=\",{\"1\":{\"52\":1}}],[\"file\",{\"0\":{\"57\":1},\"1\":{\"31\":1,\"34\":2,\"52\":1,\"57\":2}}],[\"first\",{\"1\":{\"66\":1}}],[\"find\",{\"0\":{\"55\":1},\"1\":{\"42\":2,\"51\":1,\"55\":2,\"88\":1}}],[\"finalize\",{\"1\":{\"10\":1,\"11\":1}}],[\"fetch\",{\"1\":{\"19\":1}}],[\"full\",{\"1\":{\"12\":2,\"13\":1}}],[\"授权操作完后刷新权限\",{\"1\":{\"5\":1}}],[\"第二个表示所有数据表\",{\"1\":{\"5\":1}}],[\"第一个表示所有数据库\",{\"1\":{\"5\":1}}],[\"o文件\",{\"1\":{\"110\":1}}],[\"observer\",{\"1\":{\"106\":1,\"107\":1}}],[\"object\",{\"1\":{\"93\":1,\"106\":1}}],[\"objdump\",{\"1\":{\"90\":1}}],[\"of\",{\"1\":{\"93\":2,\"106\":1,\"107\":1}}],[\"off\",{\"1\":{\"12\":2}}],[\"o是程序的入口文件\",{\"1\":{\"82\":1}}],[\"o是编译生成的目标文件\",{\"1\":{\"80\":1}}],[\"o选项指定生成的动态库文件名\",{\"1\":{\"80\":1}}],[\"o\",{\"1\":{\"80\":2,\"82\":2,\"85\":1,\"86\":1,\"110\":2}}],[\"other\",{\"1\":{\"71\":11,\"72\":7,\"75\":13}}],[\"out\",{\"1\":{\"66\":1}}],[\"output\",{\"1\":{\"58\":4,\"87\":2,\"113\":1,\"114\":1}}],[\"oriented\",{\"1\":{\"93\":1}}],[\"origin\",{\"1\":{\"19\":1,\"20\":1,\"21\":1}}],[\"org\",{\"1\":{\"14\":2}}],[\"operator=\",{\"1\":{\"71\":1,\"72\":1,\"75\":1}}],[\"operator==\",{\"1\":{\"71\":1}}],[\"operator\",{\"1\":{\"71\":3,\"72\":2}}],[\"operator++\",{\"1\":{\"71\":1}}],[\"opencv\",{\"1\":{\"55\":4}}],[\"open语句后面加一行代码\",{\"1\":{\"12\":1}}],[\"open\",{\"0\":{\"95\":1},\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":2}}],[\"options\",{\"1\":{\"43\":3}}],[\"option\",{\"1\":{\"5\":1,\"6\":1}}],[\"oneline\",{\"1\":{\"31\":1}}],[\"on\",{\"1\":{\"5\":1,\"6\":3,\"14\":1}}],[\"表示允许\",{\"1\":{\"4\":1}}],[\"这就是函数名称重载问题\",{\"1\":{\"79\":1}}],[\"这是通过将两个shared\",{\"1\":{\"72\":1}}],[\"这是通过将新的shared\",{\"1\":{\"72\":1}}],[\"这时自由存储区就区别于堆了\",{\"1\":{\"67\":1}}],[\"这时藉由new运算符分配的对象\",{\"1\":{\"67\":1}}],[\"这一部分内存不是自动管理的\",{\"1\":{\"65\":1}}],[\"这一步完成之后\",{\"1\":{\"5\":1}}],[\"这一步不是必须的\",{\"1\":{\"2\":1}}],[\"这些c++方向除了使用c++语言之外\",{\"1\":{\"76\":1}}],[\"这些函数实现了vector的自动扩容和元素操作功能\",{\"1\":{\"75\":1}}],[\"这些策略可以减少内存分配和复制的次数\",{\"1\":{\"74\":1}}],[\"这些路径应根据实际情况进行修改\",{\"1\":{\"51\":1}}],[\"这些设置应根据实际情况进行修改\",{\"1\":{\"50\":1}}],[\"这些选项可以通过\",{\"1\":{\"46\":1}}],[\"这里使用target\",{\"1\":{\"88\":1}}],[\"这里使用find\",{\"1\":{\"88\":1}}],[\"这里使用set\",{\"1\":{\"87\":1}}],[\"这里使用add\",{\"1\":{\"87\":1}}],[\"这里使用的是\",{\"1\":{\"36\":1}}],[\"这里将交叉编译工具链的路径设置为\",{\"1\":{\"52\":1}}],[\"这里将交叉编译器根路径设置为\",{\"1\":{\"51\":1}}],[\"这里将系统名称设置为\",{\"1\":{\"50\":1}}],[\"这个原则的意思是\",{\"1\":{\"98\":1}}],[\"这个原则是开闭原则的基础\",{\"1\":{\"97\":1}}],[\"这个函数所有在栈中相关的变量都将被删除\",{\"1\":{\"66\":1}}],[\"这个命令将使用\",{\"1\":{\"47\":1}}],[\"这个命令将使用默认的构建工具来构建项目\",{\"1\":{\"47\":1}}],[\"这个命令将指定构建类型为\",{\"1\":{\"46\":1}}],[\"这个段的所有\",{\"1\":{\"4\":1}}],[\"这可以通过\",{\"1\":{\"40\":1,\"41\":1,\"42\":1,\"43\":1}}],[\"这将创建一个名为\",{\"1\":{\"29\":1}}],[\"这样的全局c语句使得字符串文字\",{\"1\":{\"63\":1}}],[\"这样可以在编译过程中执行自定义命令\",{\"1\":{\"58\":1}}],[\"这样可以在生成过程中自动生成\",{\"1\":{\"57\":1}}],[\"这样可以方便地使用\",{\"1\":{\"55\":1,\"56\":1}}],[\"这样可以启用所有警告信息\",{\"1\":{\"43\":1}}],[\"这样就完全没有问题了\",{\"1\":{\"14\":1}}],[\"这样\",{\"1\":{\"4\":1,\"52\":1}}],[\"为避免同名\",{\"1\":{\"79\":1}}],[\"为了提高vector的性能\",{\"1\":{\"74\":1}}],[\"为该用户登录的域名\",{\"1\":{\"5\":1}}],[\"为指定的用户\",{\"1\":{\"5\":1}}],[\"为远程访问用户授权\",{\"0\":{\"5\":1}}],[\"为密码\",{\"1\":{\"4\":1}}],[\"为\",{\"1\":{\"4\":2}}],[\"为登录域名\",{\"1\":{\"4\":1}}],[\"为用户名\",{\"1\":{\"4\":1}}],[\"首先\",{\"1\":{\"45\":1}}],[\"首先登录\",{\"1\":{\"4\":1}}],[\"首先通过以下命令登录mysql\",{\"1\":{\"2\":1}}],[\"添加动态库的目标\",{\"1\":{\"87\":1}}],[\"添加远程仓库\",{\"1\":{\"33\":1}}],[\"添加远程访问用户\",{\"0\":{\"4\":1}}],[\"添加root密码\",{\"0\":{\"2\":1}}],[\"ranlib\",{\"1\":{\"110\":1}}],[\"ranlib工具为静态库建立索引\",{\"1\":{\"110\":1}}],[\"ralph\",{\"1\":{\"93\":1}}],[\"rcs\",{\"1\":{\"110\":1}}],[\"richard\",{\"1\":{\"93\":1}}],[\"r\",{\"1\":{\"91\":2}}],[\"r参数\",{\"1\":{\"91\":1}}],[\"rpath=\",{\"1\":{\"86\":2}}],[\"rpath参数可能会引起安全和稳定性问题\",{\"1\":{\"86\":1}}],[\"rpath参数是用于指定运行时动态库搜索路径的选项\",{\"1\":{\"86\":1}}],[\"rpath参数也可以指定动态库的路径\",{\"1\":{\"86\":1}}],[\"rpath参数\",{\"0\":{\"86\":1}}],[\"rtld\",{\"1\":{\"83\":1}}],[\"reuse\",{\"0\":{\"100\":1}}],[\"reusable\",{\"1\":{\"93\":1}}],[\"readelf\",{\"1\":{\"90\":1}}],[\"ret\",{\"1\":{\"83\":4}}],[\"return\",{\"1\":{\"71\":13,\"72\":4,\"75\":8,\"78\":2,\"79\":1}}],[\"ref\",{\"1\":{\"72\":19}}],[\"review也很重要\",{\"1\":{\"69\":1}}],[\"revoke\",{\"1\":{\"6\":3}}],[\"relwithdebinfo\",{\"1\":{\"54\":1}}],[\"release\",{\"1\":{\"46\":1,\"54\":1}}],[\"releases\",{\"1\":{\"14\":1}}],[\"required\",{\"1\":{\"40\":2,\"42\":1,\"55\":1}}],[\"repository\",{\"1\":{\"30\":1,\"33\":1}}],[\"remote\",{\"1\":{\"21\":1,\"33\":6}}],[\"removal\",{\"1\":{\"15\":1}}],[\"resolved\",{\"1\":{\"109\":2}}],[\"resposibility\",{\"1\":{\"107\":1}}],[\"responsibility\",{\"0\":{\"101\":1},\"1\":{\"106\":1}}],[\"result\",{\"1\":{\"83\":2}}],[\"resize\",{\"1\":{\"75\":2}}],[\"reserve\",{\"1\":{\"75\":3}}],[\"reset\",{\"1\":{\"10\":1,\"11\":1,\"34\":2}}],[\"restart\",{\"1\":{\"3\":2}}],[\"root\",{\"1\":{\"2\":3,\"51\":1}}],[\"singleton\",{\"1\":{\"104\":1,\"107\":1}}],[\"single\",{\"0\":{\"101\":1}}],[\"size表示当前元素数量\",{\"1\":{\"75\":1}}],[\"size++\",{\"1\":{\"75\":1}}],[\"size\",{\"1\":{\"71\":4,\"75\":32}}],[\"shared选项表示生成动态库文件\",{\"1\":{\"80\":1}}],[\"sharedptr<t>\",{\"1\":{\"72\":3}}],[\"sharedptr\",{\"1\":{\"72\":4}}],[\"shared\",{\"0\":{\"72\":1},\"1\":{\"72\":5,\"80\":1,\"87\":1}}],[\"swap\",{\"1\":{\"71\":4,\"75\":5}}],[\"s\",{\"1\":{\"63\":1}}],[\"suffix\",{\"1\":{\"114\":1}}],[\"substitution\",{\"0\":{\"96\":1}}],[\"subdirectory\",{\"0\":{\"56\":1},\"1\":{\"56\":2}}],[\"sudo\",{\"1\":{\"3\":2,\"26\":1}}],[\"soname\",{\"1\":{\"90\":1}}],[\"so的动态库文件\",{\"1\":{\"85\":1,\"86\":1}}],[\"so\",{\"1\":{\"77\":1,\"80\":1,\"83\":1,\"84\":2,\"90\":2,\"91\":1,\"109\":1}}],[\"software\",{\"1\":{\"93\":1}}],[\"soft\",{\"1\":{\"57\":3}}],[\"source\",{\"1\":{\"46\":3,\"54\":2,\"59\":1}}],[\"socks5\",{\"1\":{\"36\":2}}],[\"squash\",{\"1\":{\"16\":2}}],[\"sql\",{\"1\":{\"10\":6,\"11\":3}}],[\"sqlite3\",{\"1\":{\"8\":5,\"9\":9,\"10\":15,\"11\":17,\"12\":2}}],[\"sqlite3性能优化\",{\"0\":{\"7\":1}}],[\"symbol\",{\"1\":{\"64\":1}}],[\"sysroot\",{\"1\":{\"51\":3}}],[\"system\",{\"1\":{\"50\":2}}],[\"systemctl\",{\"1\":{\"3\":1}}],[\"synchronous=normal\",{\"1\":{\"12\":1}}],[\"synchronous设置为normal的方法为\",{\"1\":{\"12\":1}}],[\"synchronous\",{\"1\":{\"12\":1,\"13\":1}}],[\"store\",{\"0\":{\"67\":1}}],[\"stack\",{\"0\":{\"66\":1}}],[\"state\",{\"1\":{\"106\":1,\"107\":1}}],[\"static\",{\"1\":{\"64\":1,\"112\":1}}],[\"status\",{\"1\":{\"31\":1}}],[\"started\",{\"1\":{\"64\":1}}],[\"studio和xcode等ide的项目文件\",{\"1\":{\"38\":1}}],[\"step\",{\"1\":{\"10\":1,\"11\":1}}],[\"steady\",{\"1\":{\"8\":2,\"9\":2,\"10\":2,\"11\":2}}],[\"strategy\",{\"1\":{\"106\":1,\"107\":1}}],[\"structural\",{\"1\":{\"105\":1}}],[\"struct\",{\"1\":{\"71\":1}}],[\"string\",{\"1\":{\"63\":1}}],[\"str\",{\"1\":{\"10\":3,\"11\":3}}],[\"strlen\",{\"1\":{\"10\":2,\"11\":2}}],[\"stmt\",{\"1\":{\"10\":8,\"11\":8}}],[\"std=c++11\",{\"1\":{\"43\":1,\"54\":1}}],[\"std\",{\"1\":{\"8\":3,\"9\":3,\"10\":3,\"11\":3,\"71\":2,\"72\":4,\"75\":5}}],[\"segregation\",{\"0\":{\"98\":1}}],[\"segment\",{\"0\":{\"61\":1,\"62\":1,\"63\":1,\"64\":1},\"1\":{\"63\":1}}],[\"set\",{\"1\":{\"43\":1,\"50\":5,\"51\":3,\"54\":2,\"57\":3,\"87\":1,\"113\":1,\"114\":1,\"115\":1}}],[\"setup\",{\"1\":{\"14\":1}}],[\"select\",{\"1\":{\"4\":1}}],[\"service\",{\"1\":{\"3\":2}}],[\"server\",{\"1\":{\"3\":1}}],[\"服务\",{\"1\":{\"3\":1}}],[\"服务器默认绑定的地址是\",{\"1\":{\"1\":1}}],[\"然后调用动态库中的函数\",{\"1\":{\"109\":1}}],[\"然后将指定的list的元素复制到当前list中\",{\"1\":{\"71\":1}}],[\"然后在拷贝构造函数\",{\"1\":{\"72\":1}}],[\"然后在\",{\"1\":{\"50\":1}}],[\"然后按照提示进行安装\",{\"1\":{\"24\":1}}],[\"然后我找到这篇文章https\",{\"1\":{\"14\":1}}],[\"然后输入以下命令\",{\"1\":{\"4\":1}}],[\"然后输入以下两条命令添加密码\",{\"1\":{\"2\":1}}],[\"然后依次输入以下命令\",{\"1\":{\"4\":1}}],[\"然后重启\",{\"1\":{\"3\":1}}],[\"behavioral\",{\"1\":{\"106\":1}}],[\"begin\",{\"1\":{\"8\":2,\"9\":4,\"10\":4,\"11\":4,\"71\":5,\"75\":5}}],[\"bool\",{\"1\":{\"71\":3,\"75\":1,\"83\":1}}],[\"boost\",{\"1\":{\"42\":4}}],[\"back和clear等\",{\"1\":{\"75\":1}}],[\"back\",{\"1\":{\"71\":5,\"75\":3}}],[\"block\",{\"1\":{\"64\":1}}],[\"bss\",{\"0\":{\"64\":1},\"1\":{\"64\":2}}],[\"binary\",{\"1\":{\"57\":1,\"87\":2,\"88\":2}}],[\"bind\",{\"1\":{\"3\":1,\"10\":2,\"11\":2}}],[\"builder\",{\"1\":{\"104\":1,\"107\":1}}],[\"build\",{\"1\":{\"45\":3,\"46\":1,\"47\":2,\"48\":1,\"54\":1}}],[\"bridge\",{\"1\":{\"105\":1,\"107\":1}}],[\"brew\",{\"1\":{\"25\":1}}],[\"branch\",{\"1\":{\"19\":1,\"32\":8,\"33\":3}}],[\"brancha\",{\"1\":{\"16\":1}}],[\"b\",{\"1\":{\"19\":1,\"32\":1,\"78\":4,\"79\":2}}],[\"by\",{\"1\":{\"2\":1,\"4\":1,\"64\":1}}],[\"将对象的部分创建工作延迟到子类或者其他对象\",{\"1\":{\"104\":1}}],[\"将动态库链接到目标文件\",{\"1\":{\"88\":1}}],[\"将指定分支合并到当前分支\",{\"1\":{\"32\":1}}],[\"将暂存区的更改提交到仓库\",{\"1\":{\"31\":1}}],[\"将所有文件添加到暂存区\",{\"1\":{\"31\":1}}],[\"将文件添加到暂存区\",{\"1\":{\"31\":1}}],[\"将某个远程主机的更新\",{\"1\":{\"19\":1}}],[\"将代码推送到远程仓库\",{\"1\":{\"16\":1}}],[\"将当前整个工作区中被修改和被删除的文件提交至暂存区\",{\"1\":{\"15\":1}}],[\"将当前整个工作区中所有的文件改动提交至暂存区\",{\"1\":{\"15\":1}}],[\"将当前工作区中当前目录\",{\"1\":{\"15\":2}}],[\"将\",{\"1\":{\"3\":1,\"41\":1}}],[\"it\",{\"1\":{\"71\":2}}],[\"iterator\",{\"1\":{\"71\":17,\"75\":1,\"106\":1,\"107\":1}}],[\"ignore\",{\"1\":{\"15\":1}}],[\"ifdef\",{\"1\":{\"79\":2}}],[\"ifndef\",{\"1\":{\"57\":1}}],[\"if\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"72\":5,\"75\":3,\"83\":6}}],[\"io\",{\"1\":{\"9\":1}}],[\"i++\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"i\",{\"1\":{\"8\":2,\"9\":3,\"10\":3,\"11\":3,\"64\":1,\"75\":6}}],[\"inversion\",{\"0\":{\"97\":1}}],[\"input\",{\"1\":{\"58\":1}}],[\"in内容如下\",{\"1\":{\"57\":1}}],[\"in\",{\"1\":{\"57\":3,\"66\":1}}],[\"include\",{\"1\":{\"50\":1,\"55\":2,\"57\":1,\"72\":2,\"83\":2}}],[\"install\",{\"1\":{\"14\":1,\"25\":1,\"26\":1,\"54\":1}}],[\"insert\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"71\":4}}],[\"interpreter\",{\"1\":{\"106\":1,\"107\":1}}],[\"interface\",{\"0\":{\"98\":1}}],[\"integer\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"into语句将其写入到磁盘\",{\"1\":{\"11\":1}}],[\"into\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":2}}],[\"int\",{\"1\":{\"8\":2,\"9\":2,\"10\":3,\"11\":3,\"64\":2,\"72\":1,\"78\":6,\"79\":5,\"83\":12}}],[\"initialized\",{\"0\":{\"63\":1}}],[\"init\",{\"1\":{\"29\":1}}],[\"ini\",{\"1\":{\"3\":1}}],[\"id\",{\"1\":{\"8\":2,\"9\":2,\"10\":2,\"11\":2}}],[\"identified\",{\"1\":{\"2\":1,\"4\":1}}],[\"ip\",{\"1\":{\"4\":2}}],[\"creational\",{\"1\":{\"104\":1}}],[\"create\",{\"1\":{\"4\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"cplusplus\",{\"1\":{\"79\":2}}],[\"cpp笔记\",{\"0\":{\"118\":1}}],[\"cpp\",{\"1\":{\"41\":2,\"54\":1,\"87\":2}}],[\"capacity表示当前vector分配的内存容量\",{\"1\":{\"75\":1}}],[\"capacity\",{\"1\":{\"75\":19}}],[\"cast<std\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"class\",{\"1\":{\"71\":2,\"72\":1,\"75\":1}}],[\"clear\",{\"1\":{\"71\":3,\"75\":1}}],[\"clone\",{\"1\":{\"30\":1,\"35\":1}}],[\"close\",{\"0\":{\"95\":1},\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"clock\",{\"1\":{\"8\":2,\"9\":2,\"10\":2,\"11\":2}}],[\"c语言的内存分布\",{\"0\":{\"60\":1}}],[\"custom\",{\"1\":{\"58\":4}}],[\"current\",{\"1\":{\"14\":1,\"57\":1,\"59\":2}}],[\"c++代码重用和模块化开发中有着广泛的应用\",{\"1\":{\"77\":1}}],[\"c++工程师\",{\"1\":{\"76\":1}}],[\"c++作为一门编程语言\",{\"1\":{\"76\":1}}],[\"c++标准库中的vector通常采用了一些内存分配策略\",{\"1\":{\"74\":1}}],[\"c++标准库中的vector是一个动态数组\",{\"1\":{\"74\":1}}],[\"c++标准库中的list是一个双向链表\",{\"1\":{\"71\":1}}],[\"c++中的shared\",{\"1\":{\"72\":1}}],[\"c++\",{\"0\":{\"67\":1,\"68\":1},\"1\":{\"50\":1,\"54\":1,\"69\":1,\"74\":1,\"79\":1}}],[\"c++11\",{\"1\":{\"43\":1}}],[\"cxx\",{\"1\":{\"50\":1,\"54\":3}}],[\"cd\",{\"1\":{\"45\":1}}],[\"cmake文件\",{\"0\":{\"52\":1}}],[\"cmake\",{\"0\":{\"40\":1},\"1\":{\"39\":1,\"40\":3,\"46\":4,\"47\":2,\"49\":1,\"50\":6,\"51\":2,\"52\":4,\"54\":6,\"57\":1,\"59\":1,\"87\":2,\"88\":2}}],[\"cmakelists\",{\"0\":{\"39\":1},\"1\":{\"39\":2,\"40\":1,\"42\":1,\"44\":1,\"50\":2,\"51\":1,\"54\":1}}],[\"cmake被广泛用于c和c++语言\",{\"1\":{\"38\":1}}],[\"cmake是一个跨平台的管理源代码构建的工具\",{\"1\":{\"38\":1}}],[\"cmake教程\",{\"0\":{\"38\":1}}],[\"cn\",{\"1\":{\"14\":2}}],[\"cnf\",{\"1\":{\"3\":1}}],[\"chain\",{\"1\":{\"106\":1,\"107\":1}}],[\"char\",{\"1\":{\"10\":2,\"11\":2,\"63\":1}}],[\"checkout\",{\"1\":{\"19\":1,\"32\":2,\"34\":1}}],[\"chrono\",{\"1\":{\"8\":4,\"9\":4,\"10\":4,\"11\":4}}],[\"copy\",{\"1\":{\"75\":2}}],[\"coreybutler\",{\"1\":{\"14\":1}}],[\"composite\",{\"0\":{\"100\":1},\"1\":{\"105\":1,\"107\":1}}],[\"component\",{\"1\":{\"59\":1}}],[\"compiler\",{\"1\":{\"50\":2,\"54\":1}}],[\"compile\",{\"1\":{\"43\":3}}],[\"command\",{\"1\":{\"58\":4,\"106\":1,\"107\":1}}],[\"commit\",{\"1\":{\"9\":2,\"10\":2,\"11\":2,\"16\":1,\"31\":2,\"34\":1}}],[\"com\",{\"1\":{\"14\":2,\"27\":1,\"36\":1,\"37\":1}}],[\"count\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"72\":20}}],[\"const\",{\"1\":{\"8\":1,\"9\":1,\"10\":3,\"11\":3,\"71\":14,\"72\":5,\"75\":10}}],[\"configure\",{\"0\":{\"57\":1},\"1\":{\"57\":2}}],[\"config\",{\"1\":{\"27\":3,\"36\":1,\"37\":1,\"57\":6}}],[\"conf\",{\"1\":{\"3\":1}}],[\"c\",{\"0\":{\"79\":1},\"1\":{\"3\":1,\"50\":2,\"60\":1,\"79\":6,\"85\":1,\"86\":1,\"112\":2}}],[\"dlclose函数用来卸载动态库文件\",{\"1\":{\"83\":1}}],[\"dlclose\",{\"1\":{\"83\":1}}],[\"dlsym函数用来获取动态库文件中导出的函数和数据\",{\"1\":{\"83\":1}}],[\"dlsym\",{\"1\":{\"83\":1}}],[\"dlopen函数用来加载动态库文件\",{\"1\":{\"83\":1}}],[\"dlopen\",{\"1\":{\"83\":1}}],[\"dllexport\",{\"1\":{\"78\":2}}],[\"dll\",{\"1\":{\"77\":1,\"83\":1,\"109\":1}}],[\"data\",{\"0\":{\"62\":1,\"63\":1,\"64\":1},\"1\":{\"71\":2,\"75\":20}}],[\"directory\",{\"1\":{\"87\":1}}],[\"directories\",{\"1\":{\"55\":1,\"57\":1}}],[\"dir\",{\"1\":{\"57\":1,\"59\":1,\"87\":2,\"88\":2}}],[\"dirs\",{\"1\":{\"55\":1}}],[\"dist\",{\"1\":{\"14\":1}}],[\"dcmake\",{\"1\":{\"46\":1,\"52\":2}}],[\"decorator\",{\"1\":{\"105\":1,\"107\":1}}],[\"declspec\",{\"1\":{\"78\":2}}],[\"demeter\",{\"0\":{\"99\":1}}],[\"dependence\",{\"0\":{\"97\":1}}],[\"depends\",{\"1\":{\"58\":2}}],[\"design\",{\"1\":{\"93\":2}}],[\"default\",{\"1\":{\"78\":2}}],[\"define\",{\"1\":{\"57\":4}}],[\"debug=1这样的c语句\",{\"1\":{\"63\":1}}],[\"debug\",{\"1\":{\"54\":1}}],[\"delete\",{\"1\":{\"33\":1,\"71\":3,\"72\":4,\"75\":2}}],[\"dev\",{\"1\":{\"14\":1}}],[\"download\",{\"1\":{\"14\":1}}],[\"duration\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"db\",{\"1\":{\"8\":6,\"9\":10,\"10\":10,\"11\":11,\"12\":1}}],[\"drop\",{\"1\":{\"6\":1}}],[\"d\",{\"1\":{\"3\":1,\"20\":1,\"32\":1,\"46\":1,\"71\":2,\"90\":1}}],[\"需根据实际情况替换\",{\"1\":{\"36\":1}}],[\"需要使用特殊的关键字和修饰符来标识它们是动态库的导出函数\",{\"1\":{\"78\":1}}],[\"需要注意的是\",{\"1\":{\"72\":1,\"75\":1,\"85\":1,\"86\":1}}],[\"需要为数据\",{\"1\":{\"71\":1}}],[\"需要创建一个新的目录\",{\"1\":{\"45\":1}}],[\"需要在编译器链入所需的动态库\",{\"1\":{\"81\":1}}],[\"需要在构建目录中运行\",{\"1\":{\"46\":1}}],[\"需要在\",{\"1\":{\"42\":1}}],[\"需要指定指向的节点\",{\"1\":{\"71\":1}}],[\"需要指定其完整路径\",{\"1\":{\"48\":1}}],[\"需要指定构建选项\",{\"1\":{\"43\":1}}],[\"需要指定项目的名称和源代码\",{\"1\":{\"41\":1}}],[\"需要指定\",{\"1\":{\"40\":1}}],[\"需要自己手动设置\",{\"1\":{\"35\":1}}],[\"需要根据实际需求进行设置\",{\"1\":{\"4\":1}}],[\"需要进行一些简单的设置\",{\"1\":{\"1\":1}}],[\"需改为自己的密码\",{\"1\":{\"2\":1}}],[\"引号内的值\",{\"1\":{\"4\":1}}],[\"引号内的\",{\"1\":{\"2\":1}}],[\"注意栈区的大小通常都由一个限制\",{\"1\":{\"66\":1}}],[\"注意\",{\"1\":{\"2\":1,\"4\":1}}],[\"adapter\",{\"1\":{\"107\":1}}],[\"adaptor\",{\"1\":{\"105\":1}}],[\"addfunc\",{\"1\":{\"83\":3}}],[\"add\",{\"0\":{\"56\":1},\"1\":{\"15\":11,\"31\":2,\"33\":1,\"41\":2,\"43\":3,\"54\":1,\"56\":2,\"58\":4,\"78\":2,\"79\":2,\"83\":8,\"87\":1,\"112\":1}}],[\"add加不同参数的区别\",{\"0\":{\"15\":1}}],[\"address\",{\"1\":{\"3\":1}}],[\"abstract\",{\"1\":{\"104\":1,\"107\":1}}],[\"api\",{\"1\":{\"81\":1}}],[\"apt\",{\"1\":{\"2\":1,\"26\":1}}],[\"attribute\",{\"1\":{\"78\":2}}],[\"atomic<t>对象的构造和析构是线程安全的\",{\"1\":{\"72\":1}}],[\"atomic<int>对象的内存\",{\"1\":{\"72\":1}}],[\"atomic<int>对象\",{\"1\":{\"72\":1}}],[\"atomic<int>来定义引用计数\",{\"1\":{\"72\":1}}],[\"atomic<int>\",{\"1\":{\"72\":4}}],[\"archive\",{\"1\":{\"116\":2}}],[\"ar\",{\"1\":{\"110\":2}}],[\"arg2\",{\"1\":{\"58\":1}}],[\"arg1\",{\"1\":{\"58\":1}}],[\"arm\",{\"1\":{\"50\":8,\"52\":2}}],[\"a\",{\"0\":{\"113\":1},\"1\":{\"15\":3,\"19\":1,\"78\":4,\"79\":2,\"109\":1,\"110\":3,\"114\":1,\"116\":2}}],[\"available\",{\"1\":{\"14\":1}}],[\"auto\",{\"1\":{\"8\":3,\"9\":3,\"10\":3,\"11\":3,\"71\":2}}],[\"all\",{\"1\":{\"5\":1,\"6\":2}}],[\"alter\",{\"1\":{\"2\":1}}],[\"ptr的构造函数中\",{\"1\":{\"72\":1}}],[\"ptr的实现还使用了模板和模板特化的技术\",{\"1\":{\"72\":1}}],[\"ptr的实现过程可以简单地概括为以下几个步骤\",{\"1\":{\"72\":1}}],[\"ptr\",{\"1\":{\"72\":12}}],[\"ptr类的源码示例\",{\"1\":{\"72\":1}}],[\"ptr还采用了线程安全的引用计数实现\",{\"1\":{\"72\":1}}],[\"ptr对象都共享同一个控制块\",{\"1\":{\"72\":1}}],[\"ptr对象内部有一个指向控制块的指针\",{\"1\":{\"72\":1}}],[\"ptr对象还提供了自定义删除器的功能\",{\"1\":{\"72\":1}}],[\"ptr对象的引用计数指向同一个对象来实现的\",{\"1\":{\"72\":1}}],[\"ptr对象的引用计数指向原始对象的引用计数来实现的\",{\"1\":{\"72\":1}}],[\"ptr对象引用该动态内存\",{\"1\":{\"72\":1}}],[\"ptr对象被赋值给另一个shared\",{\"1\":{\"72\":1}}],[\"ptr对象被销毁时\",{\"1\":{\"72\":1}}],[\"ptr对象被复制时\",{\"1\":{\"72\":1}}],[\"ptr对象时\",{\"1\":{\"72\":2}}],[\"ptr是一种智能指针\",{\"1\":{\"72\":1}}],[\"ptr智能指针\",{\"0\":{\"72\":1}}],[\"pos\",{\"1\":{\"71\":4}}],[\"pop\",{\"1\":{\"71\":4,\"75\":2}}],[\"port\",{\"1\":{\"36\":2}}],[\"pattern\",{\"1\":{\"104\":5,\"105\":8,\"106\":12}}],[\"patterns\",{\"1\":{\"93\":2}}],[\"paths\",{\"1\":{\"88\":1}}],[\"path环境变量可能会影响系统的安全性和稳定性\",{\"1\":{\"85\":1}}],[\"path环境变量指定了动态库的搜索路径\",{\"1\":{\"85\":1}}],[\"path=\",{\"1\":{\"85\":1}}],[\"path指定动态库的搜索路径\",{\"1\":{\"85\":1}}],[\"path\",{\"1\":{\"46\":3,\"48\":1,\"50\":3,\"51\":5,\"52\":2,\"85\":6,\"86\":4}}],[\"package\",{\"0\":{\"55\":1},\"1\":{\"42\":2,\"55\":2}}],[\"password\",{\"1\":{\"2\":3,\"4\":2}}],[\"public\",{\"1\":{\"71\":2,\"72\":1,\"75\":1}}],[\"pull\",{\"1\":{\"33\":1}}],[\"push\",{\"1\":{\"16\":1,\"18\":1,\"20\":1,\"33\":2,\"35\":1,\"71\":5,\"75\":2}}],[\"prev\",{\"1\":{\"71\":2}}],[\"prefix\",{\"1\":{\"54\":1,\"114\":1,\"115\":1}}],[\"prepare\",{\"1\":{\"10\":1,\"11\":1}}],[\"prototype\",{\"1\":{\"104\":1,\"107\":1}}],[\"properties命令设置动态库的输出路径为$\",{\"1\":{\"87\":1}}],[\"properties\",{\"1\":{\"87\":2,\"113\":2,\"114\":2,\"115\":2}}],[\"profiler\",{\"1\":{\"69\":1}}],[\"processor\",{\"1\":{\"50\":1}}],[\"project\",{\"1\":{\"41\":2}}],[\"proxy\",{\"1\":{\"36\":1,\"37\":1,\"105\":1,\"107\":1}}],[\"programdata\",{\"1\":{\"3\":1}}],[\"prune\",{\"1\":{\"21\":1}}],[\"pragma\",{\"1\":{\"12\":1}}],[\"principle\",{\"0\":{\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1}}],[\"printf\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"private\",{\"1\":{\"71\":2,\"72\":1,\"75\":1}}],[\"privileges\",{\"1\":{\"5\":2,\"6\":3}}],[\"ps\",{\"1\":{\"3\":1}}],[\"p\",{\"1\":{\"2\":1,\"71\":14,\"72\":2,\"90\":1}}],[\"usr\",{\"1\":{\"84\":2}}],[\"username\",{\"1\":{\"4\":2,\"5\":2,\"6\":5}}],[\"user\",{\"1\":{\"2\":1,\"4\":3,\"6\":1,\"27\":2}}],[\"use\",{\"1\":{\"2\":1,\"4\":1,\"14\":2,\"72\":1}}],[\"uninitialized\",{\"0\":{\"64\":1}}],[\"unix\",{\"1\":{\"47\":1}}],[\"unset\",{\"1\":{\"37\":1}}],[\"untracked\",{\"1\":{\"15\":1}}],[\"url\",{\"1\":{\"30\":1,\"33\":1}}],[\"u\",{\"1\":{\"2\":1,\"15\":2}}],[\"ubuntu\",{\"1\":{\"2\":1}}],[\"上用\",{\"1\":{\"2\":1}}],[\"上安装\",{\"0\":{\"14\":1},\"1\":{\"2\":1}}],[\"密码的\",{\"1\":{\"2\":1}}],[\"在链接时\",{\"1\":{\"109\":2}}],[\"在程序中用\",{\"1\":{\"110\":1}}],[\"在程序需要进行拓展的时候\",{\"1\":{\"95\":1}}],[\"在程序开始执行之前\",{\"1\":{\"64\":1}}],[\"在实际应用中\",{\"1\":{\"81\":1}}],[\"在windows系统下\",{\"1\":{\"78\":1,\"83\":1}}],[\"在windows上安装git\",{\"0\":{\"24\":1}}],[\"在linux系统中\",{\"1\":{\"90\":1}}],[\"在linux系统下\",{\"1\":{\"78\":1,\"80\":1,\"82\":1,\"83\":1}}],[\"在linux上安装git\",{\"0\":{\"26\":1}}],[\"在cmake中链接动态库的方法如下\",{\"1\":{\"88\":1}}],[\"在cmakelists\",{\"1\":{\"87\":2,\"88\":2}}],[\"在c++动态库中定义一个函数\",{\"1\":{\"79\":1}}],[\"在c++中\",{\"1\":{\"79\":2}}],[\"在c\",{\"1\":{\"77\":1}}],[\"在工程实践中涉及的技能与知识也大相径庭\",{\"1\":{\"76\":1}}],[\"在vector的核心实现中使用了一个指针data来存储元素的内存地址\",{\"1\":{\"75\":1}}],[\"在删除元素时\",{\"1\":{\"74\":1}}],[\"在插入元素时\",{\"1\":{\"74\":1}}],[\"在shared\",{\"1\":{\"72\":1}}],[\"在sqlite3\",{\"1\":{\"12\":1}}],[\"在上面的实现中使用了模板类来定义vector\",{\"1\":{\"75\":1}}],[\"在上面的实现中\",{\"1\":{\"72\":1}}],[\"在指定位置插入一个新节点\",{\"1\":{\"71\":1}}],[\"在创建list对象时\",{\"1\":{\"71\":1}}],[\"在创建迭代器时\",{\"1\":{\"71\":1}}],[\"在创建节点时\",{\"1\":{\"71\":1}}],[\"在循环遍历时\",{\"1\":{\"70\":1}}],[\"在不恰当地使用递归时也会发生栈溢出\",{\"1\":{\"66\":1}}],[\"在堆区创建的变量可以在程序的任何地方访问\",{\"1\":{\"65\":1}}],[\"在变量使用结束时释放内存失败会造成内存泄漏\",{\"1\":{\"65\":1}}],[\"在配置项目时\",{\"1\":{\"46\":1}}],[\"在编译和链接动态库时\",{\"1\":{\"85\":1}}],[\"在编译时启用警告信息可以帮助发现代码中的潜在问题\",{\"1\":{\"43\":1}}],[\"在编写完\",{\"1\":{\"44\":1}}],[\"在编写\",{\"1\":{\"39\":1}}],[\"在这个例子中\",{\"1\":{\"41\":1,\"85\":2,\"86\":1}}],[\"在网上查了一下\",{\"1\":{\"35\":1}}],[\"在项目根目录执行以下命令\",{\"1\":{\"29\":1}}],[\"在mac上安装git\",{\"0\":{\"25\":1}}],[\"在本地新分支中进行以下命令推送即可\",{\"1\":{\"18\":1}}],[\"在命令行执行\",{\"1\":{\"14\":1}}],[\"在full模式下\",{\"1\":{\"12\":1}}],[\"在\",{\"0\":{\"14\":1},\"1\":{\"2\":1,\"12\":1,\"14\":1,\"40\":1,\"50\":1,\"51\":1,\"93\":1}}],[\"复杂\",{\"1\":{\"1\":1}}],[\"访问者模式\",{\"1\":{\"106\":1}}],[\"访问git官网下载安装程序\",{\"1\":{\"24\":1}}],[\"访问\",{\"1\":{\"1\":1}}],[\"1994\",{\"1\":{\"93\":1}}],[\"19\",{\"1\":{\"14\":2}}],[\"192\",{\"1\":{\"4\":2}}],[\"18\",{\"1\":{\"14\":4}}],[\"15\",{\"1\":{\"13\":1}}],[\"1580\",{\"1\":{\"13\":1}}],[\"1436\",{\"1\":{\"13\":1}}],[\"1447405\",{\"1\":{\"13\":1}}],[\"1168\",{\"1\":{\"13\":1}}],[\"10\",{\"1\":{\"40\":1}}],[\"1004\",{\"1\":{\"13\":1}}],[\"1000\",{\"1\":{\"9\":1,\"10\":1,\"11\":1}}],[\"10000\",{\"1\":{\"8\":1,\"9\":1,\"10\":1}}],[\"10100\",{\"1\":{\"11\":1}}],[\"12\",{\"1\":{\"14\":6}}],[\"123\",{\"1\":{\"8\":1,\"9\":1,\"10\":1,\"11\":1}}],[\"127\",{\"1\":{\"1\":1,\"3\":1,\"36\":1}}],[\"168\",{\"1\":{\"4\":2}}],[\"1\",{\"0\":{\"61\":1,\"63\":1},\"1\":{\"1\":1,\"3\":1,\"4\":2,\"10\":1,\"11\":1,\"14\":7,\"15\":2,\"16\":1,\"36\":1,\"57\":1,\"71\":1,\"72\":3,\"75\":1,\"83\":2,\"84\":1}}],[\"0\",{\"0\":{\"1\":1},\"1\":{\"1\":2,\"3\":7,\"8\":7,\"9\":19,\"10\":18,\"11\":21,\"12\":3,\"36\":2,\"57\":1,\"64\":1,\"71\":1,\"72\":3,\"75\":6,\"83\":1}}],[\"80\",{\"1\":{\"69\":3}}],[\"8\",{\"0\":{\"1\":1},\"1\":{\"3\":1,\"14\":2,\"71\":1}}],[\"喵~\",{\"1\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
