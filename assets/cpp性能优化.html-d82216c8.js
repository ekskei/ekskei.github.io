import{_ as i,W as l,X as e,$ as a}from"./framework-b32ce0b5.js";const r={},c=a('<h1 id="c-性能优化" tabindex="-1"><a class="header-anchor" href="#c-性能优化" aria-hidden="true">#</a> C++ 性能优化</h1><h2 id="原则" tabindex="-1"><a class="header-anchor" href="#原则" aria-hidden="true">#</a> 原则</h2><ul><li>《More Effective C++》书中效率部分第一条就是80—20准则。说得是——大约 20％的代码使用了 80％的程序资源；大约 20%的代码耗用了大约 80％的运行时间；大约 20％的代码使用了 80％的内存。因此，一些简单的优化也能显著提高程序性能。</li><li>先完成程序功能，再考虑性能优化的事，否则会出现代码可读性差，过度抽象等问题。</li><li>大部分的性能优化其实都是在做时间和空间的权衡，空间换时间，或者时间换空间。</li><li>良好的代码风格和代码规范能有效的避免性能问题的出现，所以code review也很重要。</li><li>大幅度的提升程序性能需要借助程序分析器（profiler）寻找出程序的性能瓶颈，针对这个瓶颈进行代码层面，算法层面，架构层面等多方面的优化。</li></ul><h2 id="常用优化方法" tabindex="-1"><a class="header-anchor" href="#常用优化方法" aria-hidden="true">#</a> 常用优化方法</h2><ul><li>空间足够时，可以将经常需要读取的资源，缓存在内存中。</li><li>尽量减少大内存对象的构造与析构，考虑缓存暂时不用的对象，等待后续继续使用。</li><li>尽量使用C++11的右值语义，减少临时对象的构造。</li><li>简单的功能函数可以使用内联。少用继承，多用组合，尽量减少继承层级。</li><li>在循环遍历时，优化判断条件，减少循环次数。</li><li>优化线程或进程的同步方式，能用原子操作的就不用锁。能应用层同步的就不用内核对象同步。</li><li>优化堆内存的使用，如果有内存频繁的申请与释放，可以考虑内存池。</li><li>优化线程的使用，节省系统资源与切换造成的性能损耗，线程使用频繁的可以考虑线程池。</li><li>尽量使用事件通知，谨慎使用轮循或者sleep函数。</li><li>界面开发中，耗时的业务代码不要放在UI线程中执行，使用单独的线程去异步处理耗时业务，提高界面响应速度。</li><li>经常重构、优化代码结构。优化算法或者架构，从设计层面进行性能的优化。</li></ul>',5),t=[c];function d(h,n){return l(),e("div",null,t)}const s=i(r,[["render",d],["__file","cpp性能优化.html.vue"]]);export{s as default};
