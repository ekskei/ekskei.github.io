const e=JSON.parse('{"key":"v-ff09e82a","path":"/docs/cpp%E7%AC%94%E8%AE%B0/vector%E7%9A%84%E5%AE%9E%E7%8E%B0.html","title":"vector的实现","lang":"zh-CN","frontmatter":{"title":"vector的实现","icon":"edit","author":{"name":"ekskei","url":"https://github.com/ekskei"},"date":"2019-03-01T00:00:00.000Z","category":["C/C++"],"tag":["STL"],"description":"vector的实现 原理 C++标准库中的vector是一个动态数组，具有自动扩容的功能。它的实现原理可以分为以下几个方面： 内存分配：vector使用new运算符来分配内存，同时在析构函数中使用delete[]运算符来释放内存。vector在内存空间不足时会自动扩容，扩容时会重新分配一块更大的内存空间，并将原有元素复制到新的内存空间中。 元素访问：vector支持随机访问，可以通过下标访问元素。vector内部使用一个指针来指向第一个元素的内存地址，通过指针加上下标的偏移量来访问指定元素的内存地址。 元素插入和删除：vector支持在末尾添加元素和删除末尾元素。在插入元素时，如果vector的内存空间不足，vector会自动扩容，并将新元素插入到末尾；在删除元素时，vector会调用元素的析构函数来销毁元素，并将size减1。 迭代器：vector支持迭代器，可以使用迭代器来遍历vector中的元素。vector的迭代器类型是指向元素的指针。 内存分配策略：为了提高vector的性能，C++标准库中的vector通常采用了一些内存分配策略，例如预分配内存空间、空间复用、指针交换等。这些策略可以减少内存分配和复制的次数，提高vector的效率。","head":[["meta",{"property":"og:url","content":"https://codevk.com/docs/cpp%E7%AC%94%E8%AE%B0/vector%E7%9A%84%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"CODEVK"}],["meta",{"property":"og:title","content":"vector的实现"}],["meta",{"property":"og:description","content":"vector的实现 原理 C++标准库中的vector是一个动态数组，具有自动扩容的功能。它的实现原理可以分为以下几个方面： 内存分配：vector使用new运算符来分配内存，同时在析构函数中使用delete[]运算符来释放内存。vector在内存空间不足时会自动扩容，扩容时会重新分配一块更大的内存空间，并将原有元素复制到新的内存空间中。 元素访问：vector支持随机访问，可以通过下标访问元素。vector内部使用一个指针来指向第一个元素的内存地址，通过指针加上下标的偏移量来访问指定元素的内存地址。 元素插入和删除：vector支持在末尾添加元素和删除末尾元素。在插入元素时，如果vector的内存空间不足，vector会自动扩容，并将新元素插入到末尾；在删除元素时，vector会调用元素的析构函数来销毁元素，并将size减1。 迭代器：vector支持迭代器，可以使用迭代器来遍历vector中的元素。vector的迭代器类型是指向元素的指针。 内存分配策略：为了提高vector的性能，C++标准库中的vector通常采用了一些内存分配策略，例如预分配内存空间、空间复用、指针交换等。这些策略可以减少内存分配和复制的次数，提高vector的效率。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-28T10:40:34.000Z"}],["meta",{"property":"article:author","content":"ekskei"}],["meta",{"property":"article:tag","content":"STL"}],["meta",{"property":"article:published_time","content":"2019-03-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-28T10:40:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"vector的实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-01T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-28T10:40:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ekskei\\",\\"url\\":\\"https://github.com/ekskei\\"}]}"]]},"headers":[{"level":2,"title":"原理","slug":"原理","link":"#原理","children":[]},{"level":2,"title":"源码","slug":"源码","link":"#源码","children":[]}],"git":{"createdTime":1680000034000,"updatedTime":1680000034000,"contributors":[{"name":"ekskei","email":"837866535@qq.com","commits":1}]},"readingTime":{"minutes":2.94,"words":882},"filePathRelative":"docs/cpp笔记/vector的实现.md","localizedDate":"2019年3月1日","excerpt":"<h1> vector的实现</h1>\\n<h2> 原理</h2>\\n<p>C++标准库中的vector是一个动态数组，具有自动扩容的功能。它的实现原理可以分为以下几个方面：</p>\\n<ol>\\n<li>\\n<p>内存分配：vector使用new运算符来分配内存，同时在析构函数中使用delete[]运算符来释放内存。vector在内存空间不足时会自动扩容，扩容时会重新分配一块更大的内存空间，并将原有元素复制到新的内存空间中。</p>\\n</li>\\n<li>\\n<p>元素访问：vector支持随机访问，可以通过下标访问元素。vector内部使用一个指针来指向第一个元素的内存地址，通过指针加上下标的偏移量来访问指定元素的内存地址。</p>\\n</li>\\n<li>\\n<p>元素插入和删除：vector支持在末尾添加元素和删除末尾元素。在插入元素时，如果vector的内存空间不足，vector会自动扩容，并将新元素插入到末尾；在删除元素时，vector会调用元素的析构函数来销毁元素，并将size减1。</p>\\n</li>\\n<li>\\n<p>迭代器：vector支持迭代器，可以使用迭代器来遍历vector中的元素。vector的迭代器类型是指向元素的指针。</p>\\n</li>\\n<li>\\n<p>内存分配策略：为了提高vector的性能，C++标准库中的vector通常采用了一些内存分配策略，例如预分配内存空间、空间复用、指针交换等。这些策略可以减少内存分配和复制的次数，提高vector的效率。</p>\\n</li>\\n</ol>","autoDesc":true}');export{e as data};
