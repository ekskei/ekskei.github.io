import{_ as i,V as e,W as l,Z as a}from"./framework-4b3cc28c.js";const r={},t=a('<h1 id="设计模式" tabindex="-1"><a class="header-anchor" href="#设计模式" aria-hidden="true">#</a> 设计模式</h1><h2 id="设计模式简介" tabindex="-1"><a class="header-anchor" href="#设计模式简介" aria-hidden="true">#</a> 设计模式简介</h2><p>设计模式（Design Patterns），就是设计过程中可以反复使用的、可以解决特定问题的设计方法。</p><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素） 的书，该书首次提到了软件开发中设计模式的概念。</p><p>四位作者合称 GOF（四人帮，全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面向对象设计原则：对接口编程而不是对实现编程，优先使用对象组合而不是继承。</p><h2 id="设计模式七大原则" tabindex="-1"><a class="header-anchor" href="#设计模式七大原则" aria-hidden="true">#</a> 设计模式七大原则</h2><h3 id="开闭原则-open-close-principle" tabindex="-1"><a class="header-anchor" href="#开闭原则-open-close-principle" aria-hidden="true">#</a> 开闭原则（Open Close Principle）</h3><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><h3 id="里氏代换原则-liskov-substitution-principle" tabindex="-1"><a class="header-anchor" href="#里氏代换原则-liskov-substitution-principle" aria-hidden="true">#</a> 里氏代换原则（Liskov Substitution Principle）</h3><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><h3 id="依赖倒转原则-dependence-inversion-principle" tabindex="-1"><a class="header-anchor" href="#依赖倒转原则-dependence-inversion-principle" aria-hidden="true">#</a> 依赖倒转原则（Dependence Inversion Principle）</h3><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><h3 id="接口隔离原则-interface-segregation-principle" tabindex="-1"><a class="header-anchor" href="#接口隔离原则-interface-segregation-principle" aria-hidden="true">#</a> 接口隔离原则（Interface Segregation Principle）</h3><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><h3 id="迪米特法则-又称最少知道原则-demeter-principle" tabindex="-1"><a class="header-anchor" href="#迪米特法则-又称最少知道原则-demeter-principle" aria-hidden="true">#</a> 迪米特法则，又称最少知道原则（Demeter Principle）</h3><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><h3 id="合成复用原则-composite-reuse-principle" tabindex="-1"><a class="header-anchor" href="#合成复用原则-composite-reuse-principle" aria-hidden="true">#</a> 合成复用原则（Composite Reuse Principle）</h3><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p><h3 id="单一职责原则-single-responsibility-principle" tabindex="-1"><a class="header-anchor" href="#单一职责原则-single-responsibility-principle" aria-hidden="true">#</a> 单一职责原则（Single responsibility principle）</h3><p>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中，另外一种定义：就一个类而言，应该仅有一个引起它变化的原因。</p><h2 id="设计模式分类" tabindex="-1"><a class="header-anchor" href="#设计模式分类" aria-hidden="true">#</a> 设计模式分类</h2><h3 id="从目的对模式分类" tabindex="-1"><a class="header-anchor" href="#从目的对模式分类" aria-hidden="true">#</a> 从目的对模式分类</h3><h4 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式" aria-hidden="true">#</a> 创建型模式</h4><p>创建型（Creational）模式：将对象的部分创建工作延迟到子类或者其他对象，从而应对需求变化为对象创建时具体类型实现引来的冲击。</p><ul><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><h4 id="结构型模式" tabindex="-1"><a class="header-anchor" href="#结构型模式" aria-hidden="true">#</a> 结构型模式</h4><p>结构型（Structural）模式：通过类继承或者对象组合获得更灵活的结构，从而应对需求变化为对象的结构带来的冲击。</p><ul><li>适配器模式（Adaptor Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><h4 id="行为型模式" tabindex="-1"><a class="header-anchor" href="#行为型模式" aria-hidden="true">#</a> 行为型模式</h4><p>行为型（Behavioral）模式：通过类继承或者对象组合来划分类与对象间的职责，从而应对需求变化为多个交互的对象带来的冲击。</p><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板方法模式（Template Method Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul><h3 id="从封装变化角度对模式分类" tabindex="-1"><a class="header-anchor" href="#从封装变化角度对模式分类" aria-hidden="true">#</a> 从封装变化角度对模式分类</h3><ul><li>组件协作 <ul><li>Template Method</li><li>Strategy</li><li>Observer/Event</li></ul></li><li>单一职责 <ul><li>Decorator</li><li>Bridge</li></ul></li><li>对象创建 <ul><li>Factory Method</li><li>Abstract Factory</li><li>Prototype</li><li>Builder</li></ul></li><li>对象性能 <ul><li>Singleton</li><li>Flyweight</li></ul></li><li>接口隔离 <ul><li>Facade</li><li>Proxy</li><li>Mediator</li><li>Adapter</li></ul></li><li>状态变化 <ul><li>Memento</li><li>State</li></ul></li><li>数据结构 <ul><li>Composite</li><li>Iterator</li><li>Chain of Resposibility</li></ul></li><li>行为变化 <ul><li>Command</li><li>Visitor</li></ul></li><li>领域问题 <ul><li>Interpreter</li></ul></li></ul>',33),n=[t];function h(d,o){return e(),l("div",null,n)}const c=i(r,[["render",h],["__file","设计模式.html.vue"]]);export{c as default};
