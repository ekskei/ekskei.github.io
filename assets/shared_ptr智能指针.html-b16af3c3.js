const t=JSON.parse('{"key":"v-68781070","path":"/docs/cpp%E7%AC%94%E8%AE%B0/shared_ptr%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html","title":"shared_ptr智能指针","lang":"zh-CN","frontmatter":{"title":"shared_ptr智能指针","icon":"edit","author":{"name":"ekskei","url":"https://github.com/ekskei"},"date":"2019-03-28T00:00:00.000Z","category":["C/C++"],"tag":["指针"],"description":"shared_ptr智能指针 C++中的shared_ptr是一种智能指针，它是通过引用计数来管理动态内存的。shared_ptr的实现过程可以简单地概括为以下几个步骤： 创建一个shared_ptr对象时，它会初始化一个引用计数，该计数初始化为1，并将指针指向动态内存。 当一个shared_ptr对象被复制时，它的引用计数会增加1。这是通过将新的shared_ptr对象的引用计数指向原始对象的引用计数来实现的。 当一个shared_ptr对象被销毁时，它的引用计数会减少1。如果引用计数变为0，则意味着没有任何shared_ptr对象引用该动态内存，此时会自动释放该动态内存。 当一个shared_ptr对象被赋值给另一个shared_ptr对象时，它们共享同一个引用计数。这是通过将两个shared_ptr对象的引用计数指向同一个对象来实现的。","head":[["meta",{"property":"og:url","content":"https://codevk.com/docs/cpp%E7%AC%94%E8%AE%B0/shared_ptr%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88.html"}],["meta",{"property":"og:site_name","content":"CODEVK"}],["meta",{"property":"og:title","content":"shared_ptr智能指针"}],["meta",{"property":"og:description","content":"shared_ptr智能指针 C++中的shared_ptr是一种智能指针，它是通过引用计数来管理动态内存的。shared_ptr的实现过程可以简单地概括为以下几个步骤： 创建一个shared_ptr对象时，它会初始化一个引用计数，该计数初始化为1，并将指针指向动态内存。 当一个shared_ptr对象被复制时，它的引用计数会增加1。这是通过将新的shared_ptr对象的引用计数指向原始对象的引用计数来实现的。 当一个shared_ptr对象被销毁时，它的引用计数会减少1。如果引用计数变为0，则意味着没有任何shared_ptr对象引用该动态内存，此时会自动释放该动态内存。 当一个shared_ptr对象被赋值给另一个shared_ptr对象时，它们共享同一个引用计数。这是通过将两个shared_ptr对象的引用计数指向同一个对象来实现的。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-28T06:25:27.000Z"}],["meta",{"property":"article:author","content":"ekskei"}],["meta",{"property":"article:tag","content":"指针"}],["meta",{"property":"article:published_time","content":"2019-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-28T06:25:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"shared_ptr智能指针\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-28T06:25:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ekskei\\",\\"url\\":\\"https://github.com/ekskei\\"}]}"]]},"headers":[],"git":{"createdTime":1679980433000,"updatedTime":1679984727000,"contributors":[{"name":"ekskei","email":"837866535@qq.com","commits":2}]},"readingTime":{"minutes":2.7,"words":809},"filePathRelative":"docs/cpp笔记/shared_ptr智能指针.md","localizedDate":"2019年3月28日","excerpt":"<h1> shared_ptr智能指针</h1>\\n<p>C++中的shared_ptr是一种智能指针，它是通过引用计数来管理动态内存的。shared_ptr的实现过程可以简单地概括为以下几个步骤：</p>\\n<ol>\\n<li>\\n<p>创建一个shared_ptr对象时，它会初始化一个引用计数，该计数初始化为1，并将指针指向动态内存。</p>\\n</li>\\n<li>\\n<p>当一个shared_ptr对象被复制时，它的引用计数会增加1。这是通过将新的shared_ptr对象的引用计数指向原始对象的引用计数来实现的。</p>\\n</li>\\n<li>\\n<p>当一个shared_ptr对象被销毁时，它的引用计数会减少1。如果引用计数变为0，则意味着没有任何shared_ptr对象引用该动态内存，此时会自动释放该动态内存。</p>\\n</li>\\n<li>\\n<p>当一个shared_ptr对象被赋值给另一个shared_ptr对象时，它们共享同一个引用计数。这是通过将两个shared_ptr对象的引用计数指向同一个对象来实现的。</p>\\n</li>\\n</ol>","autoDesc":true}');export{t as data};
