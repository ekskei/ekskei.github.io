const e=JSON.parse('{"key":"v-463dbcaa","path":"/docs/cpp%E7%AC%94%E8%AE%B0/cpp%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html","title":"C++ 性能优化","lang":"zh-CN","frontmatter":{"title":"C++ 性能优化","icon":"edit","author":{"name":"ekskei","url":"https://github.com/ekskei"},"date":"2018-08-30T00:00:00.000Z","category":["C/C++"],"tag":["性能"],"description":"C++ 性能优化 原则 《More Effective C++》书中效率部分第一条就是80—20准则。说得是——大约 20％的代码使用了 80％的程序资源；大约 20%的代码耗用了大约 80％的运行时间；大约 20％的代码使用了 80％的内存。因此，一些简单的优化也能显著提高程序性能。 先完成程序功能，再考虑性能优化的事，否则会出现代码可读性差，过度抽象等问题。 大部分的性能优化其实都是在做时间和空间的权衡，空间换时间，或者时间换空间。 良好的代码风格和代码规范能有效的避免性能问题的出现，所以code review也很重要。 大幅度的提升程序性能需要借助程序分析器（profiler）寻找出程序的性能瓶颈，针对这个瓶颈进行代码层面，算法层面，架构层面等多方面的优化。","head":[["meta",{"property":"og:url","content":"https://codevk.com/docs/cpp%E7%AC%94%E8%AE%B0/cpp%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96.html"}],["meta",{"property":"og:site_name","content":"CODEVK"}],["meta",{"property":"og:title","content":"C++ 性能优化"}],["meta",{"property":"og:description","content":"C++ 性能优化 原则 《More Effective C++》书中效率部分第一条就是80—20准则。说得是——大约 20％的代码使用了 80％的程序资源；大约 20%的代码耗用了大约 80％的运行时间；大约 20％的代码使用了 80％的内存。因此，一些简单的优化也能显著提高程序性能。 先完成程序功能，再考虑性能优化的事，否则会出现代码可读性差，过度抽象等问题。 大部分的性能优化其实都是在做时间和空间的权衡，空间换时间，或者时间换空间。 良好的代码风格和代码规范能有效的避免性能问题的出现，所以code review也很重要。 大幅度的提升程序性能需要借助程序分析器（profiler）寻找出程序的性能瓶颈，针对这个瓶颈进行代码层面，算法层面，架构层面等多方面的优化。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-07T14:20:25.000Z"}],["meta",{"property":"article:author","content":"ekskei"}],["meta",{"property":"article:tag","content":"性能"}],["meta",{"property":"article:published_time","content":"2018-08-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-07T14:20:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"C++ 性能优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2018-08-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-07T14:20:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ekskei\\",\\"url\\":\\"https://github.com/ekskei\\"}]}"]]},"headers":[{"level":2,"title":"原则","slug":"原则","link":"#原则","children":[]},{"level":2,"title":"常用优化方法","slug":"常用优化方法","link":"#常用优化方法","children":[]}],"git":{"createdTime":1675779625000,"updatedTime":1675779625000,"contributors":[{"name":"ekskei","email":"837866535@qq.com","commits":1}]},"readingTime":{"minutes":2.01,"words":604},"filePathRelative":"docs/cpp笔记/cpp性能优化.md","localizedDate":"2018年8月30日","excerpt":"<h1> C++ 性能优化</h1>\\n<h2> 原则</h2>\\n<ul>\\n<li>《More Effective C++》书中效率部分第一条就是80—20准则。说得是——大约 20％的代码使用了 80％的程序资源；大约 20%的代码耗用了大约 80％的运行时间；大约 20％的代码使用了 80％的内存。因此，一些简单的优化也能显著提高程序性能。</li>\\n<li>先完成程序功能，再考虑性能优化的事，否则会出现代码可读性差，过度抽象等问题。</li>\\n<li>大部分的性能优化其实都是在做时间和空间的权衡，空间换时间，或者时间换空间。</li>\\n<li>良好的代码风格和代码规范能有效的避免性能问题的出现，所以code review也很重要。</li>\\n<li>大幅度的提升程序性能需要借助程序分析器（profiler）寻找出程序的性能瓶颈，针对这个瓶颈进行代码层面，算法层面，架构层面等多方面的优化。</li>\\n</ul>","autoDesc":true}');export{e as data};
