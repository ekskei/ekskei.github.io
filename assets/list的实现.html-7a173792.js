const t=JSON.parse('{"key":"v-1323e086","path":"/docs/cpp%E7%AC%94%E8%AE%B0/list%E7%9A%84%E5%AE%9E%E7%8E%B0.html","title":"list的实现","lang":"zh-CN","frontmatter":{"title":"list的实现","icon":"edit","author":{"name":"ekskei","url":"https://github.com/ekskei"},"date":"2019-03-02T00:00:00.000Z","category":["C/C++"],"tag":["STL"],"description":"list的实现 C++标准库中的list是一个双向链表，可以支持在任意位置插入和删除元素，并且具有快速的插入和删除效率。 与vector的区别 与vector相比，list的主要区别在于： 存储结构：vector采用连续的内存空间存储元素，而list采用链式结构存储元素。 随机访问：vector支持随机访问，可以通过下标访问元素；而list不支持随机访问，只能通过迭代器遍历元素。 插入和删除：vector在末尾插入和删除元素的效率很高，但在中间插入和删除元素时效率较低，因为需要移动其他元素；而list在任意位置插入和删除元素的效率都很高，因为只需要修改相邻节点的指针。 内存分配：vector在内存空间不足时会自动扩容，会重新分配一块更大的内存空间，并将原有元素复制到新的内存空间中；而list的内存分配是动态的，每次插入一个元素都会分配一块新的内存空间。","head":[["meta",{"property":"og:url","content":"https://codevk.com/docs/cpp%E7%AC%94%E8%AE%B0/list%E7%9A%84%E5%AE%9E%E7%8E%B0.html"}],["meta",{"property":"og:site_name","content":"CODEVK"}],["meta",{"property":"og:title","content":"list的实现"}],["meta",{"property":"og:description","content":"list的实现 C++标准库中的list是一个双向链表，可以支持在任意位置插入和删除元素，并且具有快速的插入和删除效率。 与vector的区别 与vector相比，list的主要区别在于： 存储结构：vector采用连续的内存空间存储元素，而list采用链式结构存储元素。 随机访问：vector支持随机访问，可以通过下标访问元素；而list不支持随机访问，只能通过迭代器遍历元素。 插入和删除：vector在末尾插入和删除元素的效率很高，但在中间插入和删除元素时效率较低，因为需要移动其他元素；而list在任意位置插入和删除元素的效率都很高，因为只需要修改相邻节点的指针。 内存分配：vector在内存空间不足时会自动扩容，会重新分配一块更大的内存空间，并将原有元素复制到新的内存空间中；而list的内存分配是动态的，每次插入一个元素都会分配一块新的内存空间。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-28T10:40:34.000Z"}],["meta",{"property":"article:author","content":"ekskei"}],["meta",{"property":"article:tag","content":"STL"}],["meta",{"property":"article:published_time","content":"2019-03-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-28T10:40:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"list的实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-03-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-28T10:40:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"ekskei\\",\\"url\\":\\"https://github.com/ekskei\\"}]}"]]},"headers":[],"git":{"createdTime":1680000034000,"updatedTime":1680000034000,"contributors":[{"name":"ekskei","email":"837866535@qq.com","commits":1}]},"readingTime":{"minutes":3.32,"words":995},"filePathRelative":"docs/cpp笔记/list的实现.md","localizedDate":"2019年3月2日","excerpt":"<h1> list的实现</h1>\\n<p>C++标准库中的list是一个双向链表，可以支持在任意位置插入和删除元素，并且具有快速的插入和删除效率。</p>\\n<h1> 与vector的区别</h1>\\n<p>与vector相比，list的主要区别在于：</p>\\n<ol>\\n<li>\\n<p>存储结构：vector采用连续的内存空间存储元素，而list采用链式结构存储元素。</p>\\n</li>\\n<li>\\n<p>随机访问：vector支持随机访问，可以通过下标访问元素；而list不支持随机访问，只能通过迭代器遍历元素。</p>\\n</li>\\n<li>\\n<p>插入和删除：vector在末尾插入和删除元素的效率很高，但在中间插入和删除元素时效率较低，因为需要移动其他元素；而list在任意位置插入和删除元素的效率都很高，因为只需要修改相邻节点的指针。</p>\\n</li>\\n<li>\\n<p>内存分配：vector在内存空间不足时会自动扩容，会重新分配一块更大的内存空间，并将原有元素复制到新的内存空间中；而list的内存分配是动态的，每次插入一个元素都会分配一块新的内存空间。</p>\\n</li>\\n</ol>","autoDesc":true}');export{t as data};
